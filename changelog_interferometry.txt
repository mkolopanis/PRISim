From 2c7a4ad (issue-22), bbc3ff3 (master):
=========================================

(*) Add README.rst to repo
(*) Remove README.txt from repo
(*) Add .gitignore to repo
(*) Add prisim/githash.txt to repo

In setup.py,

(*) Replace occurrences of README.txt with README.rst

From c42e4e4 (issue-18), 27af5bc (master):
=========================================

In prisim/interferometry.py,

(*) Add fixes from issue#18, anemly, importing ascii from astropy.io
and adding 'antenna_positions' to attributes list to initialize
UVData object of the pyuvdata module

From bb62b35 (master):
=====================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add parameter custom_reffreq to specify reference frequency for
the custom catalog

In scripts/run_prisim.py,

(*) Replace hard-coded reference frequency for the custom catalog
with the one read from the parameter file now updated as above

From cce8bf8 (master):
=====================

In scripts/run_prisim.py,

(*) Import UVBeam module from pyuvdata
(*) Integrate use of uvdata.UVBeam module to use external beams
in UVBeam format

In prisim/examples/simparms/defaultparms.yaml,

(*) Indicate option to input external beams in UVBeam format

From d71c10e (closure):
======================

In prisim/delay_spectrum.py,

(*) Minor changes in docstring of member function
compute_closure_phase_power_spectrum() of class DelayPowerSpectrum

From 343af6e (closure):
======================

In prisim/interferometry.py,

(*) In member function getClosurePhase() of class InterferometerArray,
incorporate respective bandpass weights into the visibility triplets 
before returning their phases

In prisim/delay_spectrum.py,

(*) In member function subband_delay_transform_closure_phase() of
class DelaySpectrum, in determining quantities lag_kernel and delay
spectrum of closure phases, exclude using the attribute bp (bandpass
shape) and only use freq_wts.
(*) In member function subband_delay_transform_closure_phase() of
class DelaySpectrum, use negative sign in the exponent while computing
the complex exponential from closure phase

From 16158f8 (closure):
======================

In prisim/interferometry.py,

(*) In member function getClosurePhase() of class InterferometerArray,
add triplets of baseline vectors in the returned dictionary under key
'baseline_triplets'. Update member function docstring accordingly

In prisim/delay_spectrum.py,

(*) In member function subband_delay_transform_closure_phase() of
class DelaySpectrum, add triplets of baseline vectors in the returned
dictionary under key 'baseline_triplets'. Update member function
docstring accordingly
(*) Add member function compute_closure_phase_power_spectrum() along
with docstring in class DelayPowerSpectrum to compute delay power
spectrum of closure phases. Update class docstring accordingly

From 6b3b9f6 (closure):
======================

In prisim/delay_spectrum.py,

(*) Add member function subband_delay_transform_closure_phase() along
with docstring to class DelaySpectrum. Update class docstring
accordingly
(*) minor updates to docstring of class DelaySpectrum

From f36cce1 (master):
=====================

In prisim/interferometry.py,

(*) In member function getClosurePhase() of class InterferometerArray,
add output closure phases of thermal noise on visibilities. Update
member function docstring accordingly

From 2b5384e (master):
=====================

In prisim/interferometry.py,

(*) In fuction uniq_baselines(), increase precision of baseline
orientation when determining unique baselines
(*) In function getBaselineInfo(), raise warning instead of error
when no redundant baselines are found

From 86cb163 (closure):
======================

In prisim/interferometry.py,

(*) Fix minor bug in member function getClosurePhase() of class
InterferometerArray

In prisim/examples/simparms/defaultparms.yaml,

(*) Add option to input skymodel as a HDF5 file that can be read
to create an instance of class SkyModel directly

In scripts/run_prisim.py,

(*) Update to input skymod_file parameter to create an instance of
class SkyModel directly

From fb76b5b (master):
=====================

In prisim/interferometry.py,

(*) Add member function getClosurePhase() along with docstring under
class InterferometerArray. Update class docstring accordingly
(*) Fix data type in getBaselineInfo() of blgroups_reversemap

From cd1432f (measurement-group):
================================

In scripts/make_redundant_visibilities.py,

(*) Update routine to make redundant visibilities directly from the
attribute blgroups in class InterferometerArray if parmsfile is not
specified

From 7bf7adc (measurement-group):
================================

In prisim/examples/simparms/defaultparms.yaml,

(*) Indicate saving or initializing from simulation output in FITS 
format is not supported or developed anymore.

From 14b593b (measurement-group):
================================

In prisim/interferometry.py,

(*) In __init__() member function of class InterferometerArray,
initialize attributes blgroups and bl_reversemap from HDF5 input
file. This is not supported in FITS format

From 0d78ae6 (measurement-group):
================================

In prisim/interferometry.py,

(*) In save() member function of class InterferometerArray, save
attributes blgroups and bl_reversemap in HDF5 format. This is not
supported in FITS format

From 8bb4c5b (measurement-group):
================================

In prisim/interferometry.py,

(*) In duplicate_measurements() member function of class
InterferometerArray, make input blgroups optional with default input
as None. In case of default input, the input is taken from the class
attribute blgroups
(*) Add checking in duplicate_measurements() member function of class
InterferometerArray for redundancy before creating redundant sets

In scripts/run_prisim.py,

(*) Remove usage of variable array_is_redundant

From 286d4da (measurement-group):
================================

In prisim/interferometry.py,

(*) Add attribute blgroups and bl_reversemap along with docstrings in
class InterferometerArray
(*) Initialize attributes blgroups and bl_reversemap through input
blgroupinfo in __init__() member function of class InterferometerArray
and update member function docstring accordingly

In scripts/run_prisim.py,

(*) Pass inputs blgroups and bl_reversemap in calls that initialize
instances of class InterferometerArray

From 1366afc (measurement-group):
================================

In prisim/interferometry.py,

(*) Add member function getThreePointCombinations() along with
docstring to class InterferometerArray. Update class docstring
accordingly

From f4031ac (measurement-group):
================================

In prisim/examples/simparms/defaultparms.yaml,

(*) Make minor change in commented text

From 8699c6e (measurement-group):
================================

In scripts/run_prisim.py,

(*) Remove commented lines

From 87c804a (measurement-group):
================================

In scripts/run_prisim.py,

(*) Comment out array layout and baseline generation and instead use
getBaselineInfo() from interferometry.py

In prisim/interferometry.py,

(*) Return layout information under key 'layout_info' in the returned
dictionary in function getBaselineInfo()

From 6ffb622 (measurement-group):
================================

In scripts/make_redundant_visibilities.py,

(*) Remove commented lines

From 0702222 (master):
=====================

In prisim/interferometry.py,

(*) Add function getBaselineInfo() to calculate baselines and groups
of redundant baselines, if any
(*) Add prisim_path as a global variable

In scripts/make_redundant_visibilities.py,

(*) Move computation of baselines and redundant groups of baselines
to getBaselineInfo() under prisim/interferometry.py
(*) Update inputs and descriptions to argparse inputs

From 966abbd (progress):
=======================

In scripts folder,

(*) Rename prisim_memory_monitor.py to prisim_resource_monitor.py

In scripts/run_prisim.py,

(*) Replace usage of prisim_memory_monitor.py with
prisim_resource_monitor.py

From 302a3a6 (master):
=====================

In scripts/run_prisim.py,

(*) Display which chunk and remaining number of chunks under each
process

From 5e4e192 (measurement-group):
================================

In scripts/make_redundant_visibilities.py,

(*) Develop make_redundant_visibilities.py to duplicate and write
redundant visibilities

In scripts/run_prisim.py,

(*) Fix bug in indexing and selection of bl_orientation

From b4cc216 (measurement-group):
================================

In scripts folder,

(*) Start creating a script make_redundant_visibilities.py that will
expand the unique visibilities with redundant visibilities

(*) Add make_redundant_visibilities.py to git repo

From 4822f00 (measurement-group), 4d29909 (master):
==================================================

(*) Bring changes relating to writing via pyuvdata package to UVFITS
from master branch onto measurement-group

From 63f271b (measurement-group):
================================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add parameter save_redundant to save redundant visibilities
at the end of the simulation

In scripts/run_prisim.py,

(*) Process baselines so that redundant visibilities can be generated
post-facto and appended to the InterferometerArray instance

In prisim/interferometry.py,

(*) Fix bug in duplicate_measurements() member function of class
InterferometerArray

From 9ae336b (measurement-group):
================================

In scripts/run_prisim.py,

(*) Compute baseline groups if array is redundant

From 3173feb (master):
=====================

In setup.py,

(*) Add h5py package in the dependency lists

From 9ae336b (master), e9eb582 (pyuvdata):
=========================================

(*) Merge fixes in pyuvdata branch onto master branch

From 94d6002 (measurement-group):
================================

(*) Commit changelog_interferometry.txt forgotten to commit during
the merge

From 04baac3 (measurement-group), 3efb300 (master):
==================================================

(*) Merge bug fixes on master onto measurement-group branch

From f44bb2c (pyuvdata):
=======================

In MANIFEST.in,

(*) Rewrite lines involving recursive-include by changing syntax from
recursive-include <DIR> <DIR> ... and recursive-include <file> <file>
to recursive-include <DIR> <file> <file>... for each <DIR>

In prisim/interferometry.py,

(*) In createUVData() member function of class InterferometerData,
remove commented lines from Matt's version since they have now been
replaced with routines from AstroUtils package

From c9b85cd (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Scalarize telescope location parameters x, y, z in ITRF frame
before assigning to UVData attribute and writing

In setup.py,

(*) Add pyuvdata version 1.1 in dependency list to install

From 99c2eac (mkolopanis-master):
================================

In prisim/interferometry.py,

(*) In member function createUVData() of class InterferometerData,
convert telecope location from lat, lon, alt to ITRF x, y, z using
the lla2ecef() function in astroutils/geometry module and store in
the returned value
(*) Also bring in changes from mkolopanis-master branch into
member function createUVData() of class InterferometerData attributes
such as 'is_phased' and 'drift'

From 48c1c1e (freq-chunk-bugfix):
================================

In scripts/run_prisim.py,

(*) Remove commented lines from erroneous frequency chunking

From aa28afa (master):
=====================

In scripts/run_prisim.py,

(*) Fix bug in frequency chunking

From 65a1648 (measurement-group), aa28afa (master):
==================================================

(*) Merge changes from master onto measurement-group branch

From e57c820 (filehandling):
===========================

In changelog_interferometry.txt,

(*) Add changelog entry about the bug fix in the previous commit
which was forgotten earlier

From 175ea7c, ed306cb in filehandling:
=====================================

In prisim/interferometry.py,

(*) Fix bug in initializing altitude parameter in member function
__init__() of class InterferometerArray

From 891a925 (filehandling):
===========================

In scripts/run_prisim.py,

(*) Set memmap to False explicitly when calling fits.getdata() to 
read in ROI parameters before call to InterferometerArray.observe()

From 354f11c (master):
=====================

In scripts/run_prisim.py,

(*) Delete FITS data read from ROI parameters file after call to
InterferometerArray.observe()

From e57c820 (filehandling):
===========================

In changelog_interferometry.txt,

(*) Add changelog entry about the bug fix in the previous commit
which was forgotten earlier

From 175ea7c, ed306cb in filehandling:
=====================================

In prisim/interferometry.py,

(*) Fix bug in initializing altitude parameter in member function
__init__() of class InterferometerArray

From 891a925 (filehandling):
===========================

In scripts/run_prisim.py,

(*) Set memmap to False explicitly when calling fits.getdata() to 
read in ROI parameters before call to InterferometerArray.observe()

From 354f11c (master):
=====================

In scripts/run_prisim.py,

(*) Delete FITS data read from ROI parameters file after call to
InterferometerArray.observe()

From f287cee (measurement-group):
================================

In prisim/interferometry.py,

(*) Fix bug in computation of visibility gradient in observe() member
function of class InterferometerArray when memory shortage is detected
by selecting only the appropriate source indices

From 3a8bfd1 (measurement-group):
================================

In prisim/delay_spectrum.py,

(*) Add member function compute_power_spectrum_allruns() along with
docstring under class DelayPowerSpectrum to compute fullband or
subband delay power spectrum of visibilities from multiple runs.
Update class docstring accordingly
(*) Update docstring of member function delay_transform_allruns() of
class DelaySpectrum to describe output

From e8ddf4a (measurement-group):
================================

In prisim/delay_spectrum.py,

(*) Add member function subband_delay_transform_allruns() along with
docstring under class DelaySpectrum to compute subband delay spectrum
of visibilities from multiple runs. Update class docstring accordingly

From 661440c (antpos):
=====================

In prisim/interferometry.py,

(*) Update duplicate_measurements() member function of class
InterferometerArray to duplicate attributes bp and bp_wts

In prisim/delay_spectrum.py,

(*) Add member function delay_spectrum_allruns() along with docstring
under class DelaySpectrum to compute delay spectrum from multiple
runs. Update class docstring accordingly

From da770fc (antpos):
=====================

In prisim/interferometry.py,

(*) Update apply_gradients() member function of class
InterferometerArray to handle versatile array shapes. Update docstring
accordingly

From 73c017a (antpos):
=====================

In prisim/examples/simparms/defaultparms.yaml,

(*) Minor changes in formatting

From b362026 (antpos), 354f11c (cleanup):
========================================

(*) Merge cleanup branch onto antpos branch

From 5cea670 (antpos):
=====================

In prisim/interferometry.py,

(*) Add member function apply_gradients() along with docstring under
class InterferometerArray. Update class docstring accordingly

From 060086e (antpos):
=====================

In prisim/interferometry.py,

(*) Add member function duplicate_measurements() along with docstring
under class InterferometerArray. Update class docstring accordingly
(*) Update output of function uniq_baselines() to return the indices
of all occurrences of searched values. Update docstring accordingly

In scripts/run_prisim.py,

(*) Update call to uniq_baselines() to accommodate for changes made
in uniq_baselines() on account of new function
find_all_occurrences_list1_in_list2() in astroutils/nonmathops.py

From 060086e (cleanup):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Make cleanup parameter an integer in the range 0-3 for different
levels of cleanup instead of boolean

In scripts/run_prisim.py,

(*) Update cleanup of intermediate files based on the new usage of
cleanup parameter

From 1edd7a9 (mkolopanis-master):
================================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add parameter 'altitude' for telescope altitude under Telescope
Information

In prisim/interferometry.py,

(*) Add attribute altitude to class InterferometerArray. Update
class docstring accordingly
(*) Initialize, read and write altitude attribute of class
InterferometerArray
(*) While writing UVFITS, replace frame to None instead of 'ITRF'
since the telescope parameters are already in lat, lon, alt
coordinates instead of x, y, z

In scripts/run_prisim.py,

(*) Read and set telescope altitude parameter and pass it to
initialize instances of class InterferometerArray

From 6c2896d (phasing):
======================

In scripts/run_prisim.py,

(*) Accommodate specific or default phasing for writing into UVFITS
format

In prisim/examples/simparms/defaultparms.yaml,

(*) Update parameter phase_center under Save format to accept null
as default (pointing center in ra, dec of first accumulation) or
specific ra, dec values

From 1a60afc (flux-cut):
=======================

In scripts/run_prisim.py,

(*) Apply flux thresholds when foreground catalog is custom

From 0c39ecf (flux-cut):
=======================

In scripts/run_prisim.py,

(*) Apply flux thresholds when foreground catalog is SUMSS

From 6d245f2 (flux-cut):
=======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add parameters to add flux thresholds on foreground models
involving point sources

In scripts/run_prisim.py,

(*) Apply flux thresolds in point source catalogs

From 4821cde (PAPER):
====================

In prisim/examples/simparms/defaultparms.yaml,

(*) Update PAPER-128 to PAPER-112

In scripts/run_prisim.py,

(*) Update PAPER-128 to PAPER-112
(*) Change x-spacing for PAPER-112 to 15m from 30m

From b389537 (PAPER):
====================

In prisim/primary_beams.py,

(*) Allow presets for element size when telescope id is set to
'hirax' and 'paper' in addition to existing ones in function
primary_beam_generator(). Update docstring accordingly
(*) Update docstring of telescope dictionary

In scripts/run_prisim.py,

(*) Allow option to set telescope id to 'paper' and 'hirax' and load
corresponding preset values for element size and shape
(*) Rename earlier option 'paper_dipole' to 'paper'

In prisim/examples/simparms/defaultparms.yaml,

(*) Allow option to set telescope id to 'paper' and 'hirax' and load
corresponding preset values for element size and shape
(*) Rename earlier option 'paper_dipole' to 'paper'

In prisim/interferometry.py,

(*) Update docstring of dictionary input and attribute telescope to
include 'paper', 'hirax' and 'chime' options

From 6efc096 (PAPER):
====================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add option to enter PAPER-64 and PAPER-128 antenna layouts

In scripts/run_prisim.py,

(*) Modify to accept PAPER-64 and PAPER-128 layouts

In prisim/interferometry.py,

(*) Minor changes in docstring of function rectangle_generator()

From e291075 (santoshmh-master), e1ab039 (master):
=================================================

(*) Merge branch santoshmh-master onto master branch

From 17f0d7d (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Update add_noise() member function of class InterferometerArray
to call spline_gains() or nearest_gains() member functions
depending on exceptions raised, if any
(*) Update docstrings of eval_gains() and nearest_gains() member
functions of class InterferometerArray

From 43fec54 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Add member function nearest_gains() along with docstring under
class InterferometerArray. Update class docstring accordingly

From d3fc57d (instrument-gains):
===============================

In prisim/interferometry.py,

(*) In member function add_noise() of class InterferometerArray,
evaluate instrument gains after sufficient checks for inbound values
(*) Remove obsolete commented lines

From a1a1dbd (instrument-gains), 4434d67 (master):
=================================================

(*) Bring changes in master onto instrument-gains branch

In prisim/interferometry.py,

(*) In __init__() member function of class InterferometerArray, fix
bugs in reading gaintable to initializ eattribute gaininfo

In scripts/run_prisim.py,

(*) Cleanup intermediate saved gain tables

From 39e8f23 (instrument-gains):
===============================

In prisim/examples/simparms/defaultparms.yaml,

(*) Make minor change in describing gains file parameter

From cb109a4 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Estimate instrument gains in member function add_noise() of class
InterferometerArray using spline_gains() member function of class
GainInfo of attribute gaininfo 

From bbf14b3 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) In member function save() of class InterferometerArray, write
attribute gaininfo using its member function write_gaintable() from
class GainInfo as a HDF5 file

From cc9240e (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Introduce attribute gaininfo in place of gaintable in member
function __init__() of class InterferometerArray. Change member
function and class docstrings accordingly. Earlier attribute
gaintable was a dictionary but gaininfo is an instance of class
GainInfo

In scripts/run_prisim.py,

(*) Change references from gaintable to gaininfo which is used to
initialize instances of class InterferometerArray

From 5031131 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Add and initialize attributes interpfuncs and splinefuncs along
with docstrings in member function __init__() of class GainInfo
(*) Add member function interpolator() along with docstring in class
GainInfo. It sets up interpolation functions in attribute interpfuncs
using scipy.interpolate.interp1d and scipy.interpolate.interp2d.
Update class docstring accordingly
(*) Add member function splinator() along with docstring in class
GainInfo. It sets up spline-based interpolation functions in attribute 
splinefuncs using scipy.interpolate.UnivariateSpline and
scipy.interpolate.RectBivariateSpline. Update class docstring
accordingly
(*) Add member function interpolate_gains() with docstring under class
GainInfo. It evaluates gains for specified baselines, frequencies and
times using the attribute interpfuncs. Update class docstring
accordingly
(*) Add member function spline_gains() with docstring under class
GainInfo. It evaluates gains for specified baselines, frequencies and
times using the attribute splinefuncs. Update class docstring
accordingly

From 81c63c4 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Include some more type checking in read_gaintable() and member
function write_gaintable() of class GainInfo
(*) Remove some commented lines

From b9b265e (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Create keys 'time' and 'frequency' under keys 'antenna-based' and
'baseline-based' in attribute gaintable of class GainInfo. Update all
docstrings accordingly
(*) Change key 'labels' to 'label' under keys 'antenna-based' and
'baseline-based' in attribute gaintable of class GainInfo. Update all
docstrings accordingly

From 3940b9d (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Create class GainInfo along with docstring. Create member
functions __init__(), read_gaintable(), eval_gains() and
write_gaintable() along with respective docstrings
(*) Minor change in function read_gaintable()
(*) Minor changes to docstrings related to gain tables

From 3686e90 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) In __init__() and save member functions of class
InterferometerArray, save and initialize appropriate keys and values
of gain table while using the FITS format

From 48ee938 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Add input parameter axes_order in function read_gaintable().
Update docstring accordingly
(*) Add input parameter axes_order in function extract_gains().
Update docstring accordingly
(*) Include axes_order input in call to extract_gains() in member
function add_noise() of class InterferometerArray

In scripts/run_prisim.py,

(*) Include axes_order input in reading gain table from input file

From c78d705 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Import astroutils module nonmathops
(*) Replace lines of code inside function extract_gains() with calls
to function find_list_in_list() in module nonmathops
(*) Minor correction in docstring of function extract_gains()

From b5bd142 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Fix bugs in reading and extracting instrument gains in functions
read_gaintable() and extract_gains().
(*) Tested with an example gain table from an external file

From e7282da (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Extract and apply gains in determining attribute vis_freq in
member function add_noise() of class InterferometerArray. Update
docstring of member function and class accordingly

From 01434b5 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Add function extract_gains() (and docstring) to extract complex
gains from gain table for specified baselines, frequencies and times.

From 7edad38 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Check for presence of attributes vis_freq and vis_noise_freq to
have non-None values before rotating phase center on them

From 34fab4e (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Save gaintable attribute in save() member function of class
InterferometerArray when saving in FITS format
(*) Initialize gaintable attribute in __init__() member function of
class InterferometerArray when loading from init_file in FITS format

From ae2e92a (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Save gaintable attribute in save() member function of class
InterferometerArray when saving in HDF5 format
(*) Initialize gaintable attribute in __init__() member function of
class InterferometerArray when loading from init_file in HDF5 format

From d92cf16 (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Add attribute gaintable to class InterferometerArray and
initialize in __init__() member function from input parameters.
Update class and member function docstrings accordingly.

In scripts/run_prisim.py,

(*) In calls to initialize an instance of class InterferometerArray
using input parameters, include passing of parameter gaintable to
initialize gaintable attribute

From 30826aa (instrument-gains):
===============================

In prisim/interferometry.py,

(*) Add function read_gaintable() to read from a file and load a
dictionary containing gains specified in the file.

In scripts/run_prisim.py,

(*) Change variables relating to gain and delay errors in the phased
array to make it explicit they refer to the phased array
(*) Add option to read and load instrument gain table by calling the
newly created function read_gaintable() in prisim/interferometry.py

In prisim/examples/simparms/defaultparms.yaml,

(*) Add options to include instrument gains in the simulations through
a file

From a30fba8 (master):
=====================

In prisim/interferometry.py,

(*) In __init__() member function of class InterferometerArray, for
initialization using init_file, check for presence of keys vis_freq,
vis_noise_freq, and vis_rms_freq before initializing
(*) In concatenate() member function of class InterferometerArray,
check attributes vis_freq, vis_rms_freq and vis_noise_freq are not
None before attempting to concatenate them
(*) In save() member function of class InterferometerArray, check 
attributes vis_freq, vis_rms_freq and vis_noise_freq are not None
before attempting to save them in npz format, otherwise write only
skyvis_freq in npz format
(*) In __init__() member function of class InterferometerData, check 
attributes vis_freq, and vis_noise_freq are not None before
attempting to initialize them and also attribute under 'data_array'
key

In scripts/run_prisim.py,

(*) Move calls to generate_noise() and add_noise() member functions
of class InterferometerArray after concatenation from multiple
processes

From 15959c1 (santoshmh-master):
===============================

In prisim/interferometry.py,

(*) Rename rect_generator() to rectangle_generator()

In scripts/run_prisim.py,

(*) Rename call to rect_generator() with rectangle_generator()

In prisim/examples/simparms/defaultparms.yaml,

(*) Cosmetic formatting changes

From 4434d67 (santoshmh-master):
===============================

In prisim/interferometry.py,

(*) Add a new subroutine "rect_generator" to generate a 
rectangular array layout

In scripts/run_prisim.py,

(*) Add an option "HIRAX-1024" in the IF loop checking 
the keyword array_layout.

In prisim/examples/simparms/defaultparms.yaml,

(*) Add "HIRAX-1024" in the list of accepted default values 
for 'layout' under 'array' (Antenna Layout)
(*) Add latitude and longitude for HIRAX

From 2ba94de (bl-gradient):
==========================

In prisim/interferometry.py,

(*) Check gradient key in __init__() member function of class
InterferometerArray

From a30fba8 (bl-gradient):
==========================

In prisim/interferometry.py,

(*) Type check for input gradient_mode in observe() member function
of class InterferometerArray. 

From 17e9e05 (bl-gradient):
==========================

In prisim/examples/simparms/defaultsparms.yaml,

(*) Value of Tsys set to default of null

In scripts/run_prisim.py,

(*) Accept Tsys value directly if provided and replace it for Tant
and Trx info

From 8774052 (bl-gradient):
==========================

In prisim/interferometry.py,

(*) In member function concatenate() of class InterferometerArray,
concatenate attribute gradient
(*) In member function observe() of class InterferometerArray, fix
concatenation of attribute gradient 

From 63a105f (bl-gradient):
==========================

In prisim/interferometry.py,

(*) In member function save() of class InterferometerArray, save
gradient attribute information
(*) In member function __init__() of class InterferometerArray, read
gradient attribute information from saved files

From c26aff5 (bl-gradient):
==========================

In prisim/interferometry.py,

(*) In member function observe() of class InterferometerArray, if
input gradeint_mode is passed, gradients are computed in addition to
usual visibilities. If not, visibilities are computed as usual and
not gradients. Update docstrings of member function and class
accordingly.
(*) Remove conditional clauses in member functions generate_noise()
and add_noise() of class InterferometerArray to not depend on
attribute gradient_mode

In prisim/examples/simparms/defaultsparms.yaml,

(*) Update description of input option gradient_mode under
'processing' keys

From a307bce (bl-gradient):
==========================

In prisim/interferometry.py,

(*) Add conditional clauses in member functions generate_noise()
and add_noise() in class InterferometerArray to execute only if
attribute gradient_mode is set to None

From 2f034be (master):
=====================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add an option called 'gradient_mode' under 'processing'
parameters to process visibility gradients

In prisim/interferometry.py,

(*) Add attributes gradient and gradient_mode in __init__() member
function of class InterferometerArray. Update class and member
function docstring accordingly
(*) Add input keyword gradient_mode in member function observe()
of class InterferometerArray. Add capability in this member function
to compute visibility gradients with respect to baseline vector.
Update member function docstring accordingly
(*) Update docstring of member function observe() of class
InterferometerArray for other inputs whose descriptions were missing
earlier, namely, roi_info, and memsave

In scripts/run_prisim.py,

(*) Add option to read in gradient_mode and pass it in calls to
observe() member function of class InterferometerArray

From 29c1cef (live-memusage):
============================

In scripts/,

(*) Add script prisim_memory_monitor.py to git repo to monitor CPU
and memory usage live

In scripts/run_prisim.py,

(*) Add option to monitor CPU and memory usage live

In prisim/examples/simparms/defaultparms.yaml,

(*) Add option to monitor CPU and memory usage live

From af186b5 (master):
=====================

In scripts/run_prisim.py,

(*) Fix bug in saving the correct file under the attribute
simparms_file. Earlier it was metafile but now it is corrected to be
parmsfile

In prisim/delay_spectrum.py,

(*) Make adjustments in extracting external beam information in
member function beam3Dvol() of class DelayPowerSpectrum
(*) Update import of modules

From 364d36f (master):
=====================

In scripts/setup_prisim_data.py,

(*) Update URL to download PRISim data from

From 43cc0e5 (master):
=====================

In scripts/run_prisim.py,

(*) Rearrange chunk allotment to processes for more equal
distribution of chunk loads to parallel processes

From 54bdf62 (master):
=====================

In prisim/examples/simparms/defaultparms.yaml,

(*) Change default file format of external beam to 'FITS' from 'HDF5'

From 5d7eca0 (memory_set):
=========================

In prisim/examples/simparms/defaultparms.yaml,

(*) Remove earlier input nproc which was obsolete

From 47e531b (memory_set):
=========================

In scripts/run_prisim.py,

(*) Remove commented lines on earlier chunking procedures for
parallelization which are now obsolete since they have been replaced
with automatic chunking

In prisim/examples/simparms/defaultparms.yaml,

(*) Remove earlier inputs on chunking which are now obsolete

From 5ae8b8e (memory_set):
=========================

In scripts/run_prisim.py,

(*) Read sky fraction parameter fsky and perform chunking for
parallelization
(*) Perform automatic chunking for parallelization
(*) Comment out earlier chunking procedures

In prisim/examples/simparms/defaultparms.yaml,

(*) Add option to input usable memory
(*) Add option to indicate the sky coverage of the foreground model

From 937c112 (data-url):
=======================

(*) Remove obsolete script from scripts folder

In scripts/setup_prisim_data.py,

(*) Update URL to download PRISim data from

From 6408d47 (data-url):
=======================

(*) Add scripts/setup_prisim_data.py to git repo

In scripts/setup_prisim_data.py,

(*) Add verbose functionality

In prisim/examples/ioparms/data_setup_parms.yaml,

(*) Add verbose keyword

From 00d4bea (data-url):
=======================

(*) Remove package data from git repo

From 6403d2b (master):
=====================

(*) Add setup_prisim_data.py to scripts/ folder
(*) Add data_setup_parms.yaml to prisim/examples/ioparms/ folder

In setup.py,

(*) Add *.py files to scripts

From d2af20c (master):
=====================

In setup.py,

(*) Include prisim/examples/ioparms/ folder in package data

From 97645a6 (master):
=====================

In setup.py,

(*) Include *.FITS files in prisim/data/beams
(*) Exclude *.hdf5 files in prisim/data/beams

From 0fe2e25 (labeling):
=======================

In prisim/interferometry.py,

(*) Update __init__() member function of class InterferometerData
to handle antenna numbers, names and positions based on the antenna
IDs and labels.
(*) Verify ability to write in UVFITS format

From 570e33b (labeling):
=======================

In prisim/interferometry.py,

(*) Initialize attribute layout in __init__() member function of
class InterferometerArray from init_file in both HDF5 and FITS
formats

From 52fbbcd (labeling):
=======================

In prisim/interferometry.py,

(*) Save layout information in save() member function of class
InterferometerArray in both HDF5 and FITS formats

From 5e5c142 (labeling):
=======================

In prisim/interferometry.py,

(*) Add attribute layout in class InterferometerArray. Update
class docstring accordingly
(*) Add input keyword layout in __init__() member function
of class InterferometerArray. Update member function docstring
accordingly

In scripts/run_prisim.py,

(*) Create layout information and initialize instances of class
InterferometerArray with it
(*) Fix bugs in ids and labels of antennas and baselines

From 3d36a19 (labeling):
=======================

In prisim/interferometry.py,

(*) Modify baseline_generator() to accept antenna ids besides
antenna labels and output antenna pair ids as well as labels

In scripts/run_prisim.py,

(*) Assign ids and labels for antennas as well as baselines

From 2d874d6 (pyuvdata), 13a8297 (master):
=========================================

(*) Merge developments in pyuvdata branch onto master branch

From 3806f42 (master):
=====================

In prisim/interferometry.py,

(*) Convert input and output frequencies into units of Hz
during interpolation of externally specified beams

From 6082978 (pyuvdata):
=======================

(*) Add scripts/prisim_to_uvfits.py to git repo
(*) Add prisim/examples/ioparms/uvfitsparms.yaml to git repo

In prisim/interferometry.py,

(*) Add input keyword overwrite in write() member function of class
InterferometerData. Update member function docstring accordingly
(*) Update docstring of member function write_uvfits() of class
InterferometerArray
(*) Update docstring of member function save() of class
InterferometerArray

In scripts/prisim_to_uvfits.py,

(*) Enable to convert PRISim data to UVFITS format

In prisim/examples/ioparms/uvfitsparms.yaml,

(*) Add example parameters to allow conversion of PRISim data
to UVFITS format using the prisim_to_uvfits.py script

From 4bd1dec (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Create member function write_uvfits() (with docstring) under
class InterferometerArray to save data in UVFITS format. Update
class docstring accordingly
(*) UVFITS writing functionality in save() member function of class
InterferometerArray now calls write_uvfits() internally

In scripts/run_prisim.py,

(*) Saving to uvfits now happens outside of call to save() and
instead calls write_uvfits() directly

From dc10bce (pyuvdata):
=======================

(*) Remove deprecated prisim/data_interface.py from git repo

From a34db4e (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Conjugate visibilities of PRISim output while converting to
UVFITS in order to be compatible with CASA imaging

In prisim/data_interface.py,

(*) Conjugate visibilities of PRISim output while converting to
UVFITS in order to be compatible with CASA imaging

In scripts/run_prisim.py,

(*) Fix variable for flux density when sky model is set from a custom
catalog

From ad3b23d (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Copy class InterferometerData from data_interface.py to
interferometry.py
(*) Modify save() member function of class InterferometerArray to
save in UVFITS format. Update docstring accordingly
(*) Remove import of unused linear algebra module

In scripts/run_prisim.py,

(*) Update parsing and processing to take inputs and allow for saving
in UVFITS format
(*) Remove some commented lines

In prisim/examples/simparms/defaultparms.yaml,

(*) Add inputs for saving in UVFITS format

In prisim/data_interface.py,

(*) Make a comment noting that this module is deprecated

From 0afd315 (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Make minor changes in save() member function of class
InterferometerArray

From d011bb1 (pyuvdata):
=======================

In prisim/data_interface.py,

(*) Import warnings
(*) Update attribute infodict of class InterferometerData with more
keys in __init__() member function
(*) Add a couple of helper functions _blnum_to_antnums() and
_antnums_to_blnum() as member functions in class InterferometerData
(*) Create member function write() with docstring in class 
InterferometerData to write to external files in specified formats.
Currently works with UVFITS format. Update class docstring accordingly

From 3806f42 (master), 4b1aa52 (pyuvdata):
=========================================

(*) Merge changes from master branch on to pyuvdata branch

From f4e294f (pyuvdata):
=======================

(*) Add prisim/data_interface.py to git repo

In prisim/data_interface.py,

(*) Create class InterferometerData to act as interface between
PRISim and external data formats
(*) Create member function __init__() of class InterferometerData
to initialize an instance of the class. Add docstring.
(*) Create member function createUVData() of class InterferometerData
to return an instance of class UVData. Add docstring.
(*) Create docstring for class describing attributes and member
functions

In interferometry.py,

(*) Remove import and handling of UVData

From a076125 (master), 8e5036a (pyuvdata):
=========================================

(*) Merge changes from master branch on to pyuvdata branch

From 88f9e82 (master), 9e2f35c (pyuvdata):
=========================================

(*) Merge changes from master branch on to pyuvdata branch

From a076125 (master):
=====================

In prisim/interferometry.py,

(*) Remove import of linear algebra and optimization modules
from scipy
(*) Remove import of ipdb module

From 88f9e82 (master):
=====================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add options to perturb antenna positions

In scripts/run_prisim.py,

(*) Take into account perturbations to antenna positions

From 28fd496 (phasing):
======================

In prisim/interferometry.py,

(*) Fix fractional indexing to ensure integer index

From a55c6b6 (phasing):
======================

In prisim/interferometry.py,

(*) Change inputs to member function phase_centering() of class
InterferometerArray. This makes it consistent with other similar
member functions rotate_visibilities() and project_baselines().
Update member function docstring accordingly
(*) Change default of input do_delay_transform to False in member
function phase_centering() of class InterferometerArray. Update
member function docstring accordingly
(*) Update call to member function phase_centering() in member
function rotate_visibilities() of class InterferometerArray in
accordance with changes made above.

From 1435ea9 (phasing):
======================

In prisim/interferometry.py,

(*) Create member function rotate_visibilities() under class
InterferometerArray which serves as a wrapper to member functions
phase_centering() and project_baselines() of the same class. Update
class docstring accordingly
(*) Update description of member function project_baselines() of
class InterferometerArray to reflect the changes made in the member
function

From 7cfbc55 (phasing):
======================

In prisim/interferometry.py,

(*) Generalize input ref_point of member function project_baselines()
of class InterferometerArray to take multiple reference points and
any coordinate system in 'radec', 'hadec', 'altaz' or 'dircos'. This
input is now mandatory with no defaults. Update docstring accordingly

In scripts/run_prisim.py,

(*) Update inputs in call to member function project_baselines() of
class InterferometerArray in accordance with changes made to it

From 6a96a0b (phasing):
======================

In prisim/interferometry.py,

(*) Vectorize rotation matrix and dot product in member function
project_baselines() of class InterferometerArray

From 04715dc (master):
=====================

In prisim/interferometry.py,

(*) Remove import of unused glob module

From 3e0a050 (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Update import of uvdata module

From 482d37f (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Remove import of unused glob module

From 978bfa0 (pyuvdata), 04715dc (master):
=========================================

(*) Merge master branch onto pyuvdata to bring changes made in master

From 2ee7707 (pyuvdata):
=======================

In prisim/interferometry.py,

(*) Import uvdata module
(*) Start working on creating a uvdata object using a new member
function createUVData() under class InterferometerArray

From 1df0c85 (master):
=====================

In prisim/interferometry.py,

(*) Fix writing previleges in save() member function of class
InterferometerArray to enable overwriting of files in HDF5 format

In scripts/run_prisim.py,

(*) Remove few commented lines

From f547d01 (master):
=====================

In scripts/run_prisim.py,

(*) Fix cleanup of intermediate files for any output format

From 2ee7707 (master):
=====================

In prisim/interferometry.py,

(*) Fix bugs in updating attributes n_acc and t_obs in member function
observe() of class InterferometerArray

In scripts/run_prisim.py,

(*) Comment out setting attribute ia.t_obs manually when mpi_on_freq
is set to True

From 2298a8e (master):
=====================

(*) Add SKA1-low array layout to the repository

From e2ac156 (master):
=====================

In prisim/data/array_layouts/ folder,

(*) Change header of ascii file
MWA_128T_antenna_locations_MNRAS_2012_Beardsley_et_al.txt
slightly

In prisim/examples/simparms/defaultparms.yaml,

(*) Add option to indicate if redundancy is present in the array
layout
(*) Add options to parse the antenna array layout file which
can now read more generic ascii formats

In scripts/run_prisim.py,

(*) Add options to check for redundancy in array layout
(*) Add options to read generic ascii formats for array layout files

From 0199fed (master):
=====================

In scripts/run_prisim.py,

(*) Add type, value checking for some input parameters

From 5b719e4 (master):
=====================

(*) Add test script test_mpi4py_for_prisim.py to git repo

In setup.py,

(*) Include .hdf5 files in beams folder in data directory

From a861e83 (master):
=====================

In prisim/interferometry.py,

(*) Modify __init__() member function to initialize the object from
HDF5 files

From 1666b41 (master):
=====================

In prisim/interferometry.py,

(*) Import h5py for handling HDF5 file format
(*) Add input fmt in member function save() of class
InterferometerArray. Update member function docstring accordingly
(*) Add functionality in save() member function of class
InterferometerArray to save in HDF5 format

In scripts/run_prisim.py,

(*) Modify to save in HDF5 format

In prisim/examples/simparms/defaultparms.yaml,

(*) Add fmt option to indicate output format

From ec70a26 (master) + b4099d4 (package):
=========================================

(*) Merge branch 'package' onto branch 'master'

From 8fd5179 (master):
=====================

(*) Make changes in axes labels in figure '4a' of
main/HERA_foreground_simulations_figures.py

From 36209e1 (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add parameter to specify default simulation parameters template

In scripts/run_prisim.py,

(*) Load default simulation parameters if specified and override with
custom simulation parameters

From 72bdf8f (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add caution not to modify contents

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add caution not to modify contents

From 88eba78 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add frequency flagging related search parameters

From edd7dfe (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add output format related search parameters

From 57cef79 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add parallel processing related search parameters

From dd9a494 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add processing related search parameters

From 3a87557 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add foreground model related search parameters

From 41ff051 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add phase center related search parameters

From 73332b2 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add pointing related search parameters

In scripts/prisim_grep.py,

(*) Modify function findType() to also check for dictionary data type
(*) Modify function grepValues() to perform recursive search on
dictionaries

From 4d5bc67 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add observation related search parameters

In changelog_interferometry.txt,

(*) Modify to indicate previosu changes to defaultdbparms.yaml were
under the prisim/examples/dbparms/ folder and not prisim/examples/
folder

From 3e7f4b4 (search-db):
========================

(*) Add scripts/prisim_ls.py to git repo

In scripts/prisim_ls.py,

(*) Add functionality to list all or only changing parameters in
simulaiton runs. Add option to print output on terminal or save to an
external file

From 48e0807 (search-db):
========================

In scripts/prisim_grep.py,

(*) Add input keyword sort

From 2655d0a (search-db):
========================

In scripts/prisim_grep.py,

(*) Remove commented lines involving defunct function searchPRISimDB()
(*) Add input keyword verbose
(*) Remove import of unused masked array module numpy.ma

From be478a9 (search-db):
========================

In scripts/prisim_grep.py,

(*) Create function grepPRISim() to search PRISim simulations for the
parameters provided
(*) grepPRISim() replaces the earlier function searchPRISimDB()
(*) Comment out portions involving searchPRISimDB() which will be
defunct in later revisions

From 73e7838 (search-db):
========================

In scripts/prisim_grep.py,

(*) Add function findType() to determine value type
(*) Add functions grepBoolean(), grepScalarRange(), grepString() and
grepValue() to search and select indices

In changelog_interferometry.py,

(*) Edit to indicate changes to prisim_ls.py happened under scripts
folder and not prisim folder

From a7fe080 (search-db):
========================

(*) In scripts/ folder, rename prisim_ls.py to prisim_grep.py

From 331beb9 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add parameters to search bandpass info

In scripts/prisim_ls.py,

(*) Search for bandpass parameters

From 14cb293 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add parameters to search beam info

In scripts/prisim_ls.py,

(*) Search for beam parameters

From 0ffb367 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add parameters to search phased array info

In scripts/prisim_ls.py,

(*) Search for phased array parameters

From d7afaeb (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add parameters to search Trx, Tant, Tsys and antenna element
info

In scripts/prisim_ls.py,

(*) Search for Trx, Tant, Tsys, and antenna element parameters

From d9ad45d (search-db):
========================

In scripts/prisim_ls.py,

(*) Adjust code to account for simulation runs that are missing
meta data

From e26e753 (package):
======================

In scripts/run_prisim.py,

(*) Update initialization of sky model based on updates in class
SkyModel in the AstroUtils package

From 79ee65b (package) + e482878 (search-db):
============================================

(*) Merge branch search-db onto branch package

From 20e24ec (package):
======================

In prisim/primary_beams.py,

(*) Include calls to uniform_rectangular_aperture() and
uniform_square_aperture() in wrapper function primary_beam_generator()
(*) Minor updates to docstrings of function primary_beam_generator()

From 1d08cad (package):
======================

In prisim/primary_beams.py,

(*) Add functions uniform_rectangular_aperture() and
uniform_square_aperture() along with docstrings to compuate electric
field or power patterns of uniformly illuminated rectangular and
square apertures

From c273be2 (package):
======================

In prisim/primary_beams.py,

(*) Change sign of relative rotation by amount east2ax1 in function
isotropic_radiators_array_field_pattern(). This is because azimuths
are measured clockwise from North while east2ax1 is measured
anti-clockwise from East

From 43140a0 (package):
======================

In prisim/primary_beams.py,

(*) Add input keyword power to functions to return power patterns if
set to True. Update docstrings accordingly

From aadc8db (Tsys):
===================

In prisim/interferometry.py,

(*) Initialize attribute Tsysinfo from saved fits file in __init__()
member function of class InterferometerArray

From f93dd3f (Tsys):
===================

In prisim/interferometry.py,

(*) Write attribute Tsysinfo to fits file in save() member function
of class InterferometerArray
(*) Minor change in docstring of __init__() member function of class
InterferometerArray

From 851e1fd (Tsys):
===================

In prisim/interferometry.py,

(*) Concatenate attribute Tsysinfo in concatenate() member function
of class InterferometerArray
(*) Remove some commented lines

In scripts/run_prisim.py,

(*) Remove some commented lines

From 02cbecc (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Modify Tsys info to be specified as receiver and antenna
temperature parameters

In prisim/interferometry.py,

(*) Initialize Tsys information under attribute Tsysinfo of class
InterferometerArray. Update docstring of __init__() member function
and of the class InterferometerArray accordingly
(*) Pass Tsysinfo to observe() member function of class
InterferometerArray from which the Tsys array is constructed. Update
attribute Tsysinfo by appending with every call to observe(). Update
docstring accordingly
(*) Add input parameter bpcorrect to member function observe() of
class InterferometerArray

In scripts/run_prisim.py,

(*) Construct Tsysinfo from given Trx and Tant information in the
parameters file.
(*) Pass Tsysinfo instead of Tsys in call to observe() member function
of class InterferometerArray to be compatible with changes made to the
class and its member functions
(*) Comment all earlier calls to the old observe() member function

From 0444f79 (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add default/custom path specification for phased array layout file

In scripts/run_prisim.py,

(*) Account for default/custom path specification for phased array
layout file

From e9be3eb (package):
======================

In scripts/run_prisim.py,

(*) Change hardcoded location of array layout file for MWA-128T to a
default location in the package data directory

From e15f1f9 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add baseline selection parameters 

In scripts/prisim_ls.py,

(*) Set up database search based on baseline parameters
(*) Convert None to NaN by typecasting to NP.float

From d0b3a91 (search-db):
========================

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) In this commit, these are array layout parameters 

In scripts/prisim_ls.py,

(*) Set up database search based on array layout parameters

From e9be3eb (search-db):
========================

(*) Add prisim/examples/dbparms/defaultdbparms.yaml and
scripts/prisim_ls.py to git repo

In prisim/examples/dbparms/defaultdbparms.yaml,

(*) Add parameters in YAML format to base the database search on
(*) In this commit, these are telescope parameters 

In scripts/prisim_ls.py,

(*) This is a module to select the simulation runs that contain the
selection criteria specified in
prisim/examples/dbparms/defaultdbparms.yaml
(*) First working example created

In setup.py,

(*) Add 'examples/dbparms/*.yaml' under package_data

From eb03329 (package):
======================

In scripts/run_prisim.py,

(*) Generate simulation ID in one process and broadcast to all others
in order to avoid race conditions and creation of multiple IDs and
directories by different processes for the same simulation 

From 003a9f3 (dirstruct):
========================

In scripts/sun_prisim.py,

(*) Write meta info such as git#, user, and PRISim version in
meta.yaml under metainfo folder in the output directory
structure

From 4eb80fc (dirstruct):
========================

In setup.py,

(*) Find hash tag of current git commit (if any) and
create/overwrite a githash file named githash.txt on the fly
(*) githash.txt will not be part of the git repo because it keeps
lagging one commit behind
(*) Install githash.txt under package data

In prisim/__init__.py,

(*) Open githash.txt file and initialize attribute __githash__

From 996f965 (dirstruct):
========================

In scripts/run_prisim.py,

(*) Remove commented filename generation that was in use earlier

From c633fd5 (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Reorganize directory structure parameters
(*) Add simulation ID parameter 'simid' for simulation outputs to
go under default folders or under user-specified folders

In scripts/run_prisim.py,

(*) Modify folder structure of simulation output:
rootdir/project_dir/simid/simdata
rootdir/project_dir/simid/roi
rootdir/project_dir/simid/metainfo
rootdir/project_dir/simid/skymodel
(*) Files under rootdir/project_dir/simid/simdata:
simvis.fits and simvis.npz (if npz save parameter is set)
(*) Files under rootdir/project_dir/simid/roi: roiinfo.fits
(*) Files under rootdir/project_dir/simid/metainfo: simparms.yaml
(*) Files under rootdir/project_dir/simid/skymodel: skymodel.txt
(*) Comment out earlier filename strings that have parameters built
into them

From 8b2a3e7 (package):
======================

In scripts/run_prisim.py,

(*) Add more organization to folder structure for output products -
'sim', 'parms', 'roi' and 'skymodel' for simulated data, simulation
parameters, regions of interest, and sky model respectively.

From 52edf66 (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Add parameter to clean up intermediate files

In scripts/run_prisim.py,

(*) Add option to clean up intermediate files

From 8cf0770 (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Edit description of project directory parameter

In scripts/run_prisim.py,

(*) Import modules os, errno, astropy.time
(*) Save data into date-time folders under the project folder
(*) Create date-time folder if it does not exist already

From 362299e (package):
======================

In scripts/run_prisim.py,

(*) Add ability to simulate GLEAM catalog

From b6178a9 (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Rename user-defined PS catalog parameters as custom catalog
parameters

In scripts/run_prisim.py,

(*) Rename user-defined PS catalog parameters as custom catalog
parameters

From b2c3e8e (package):
======================

In prisim/examples/simparms/defaultparms.yaml,

(*) Allow specification of default or custom paths for catalogs

In scripts/run_prisim.py,

(*) Allow specification of default or custom paths for catalogs

In setup.py,

(*) Minor changes

From a8d950f (package):
======================

(*) All data files under and including the prisim/data/ folder
were erased and their histories were rewritten, specifically
eb7a9a4 (now 3e549f9), d28aaaa (now 2bdd6ce), and 90b4304
(now 0d8759f).
(*) Add folder data/ under prisim/
(*) Add folders beams/, bandpass/, catalogs/, array_layouts/ and
phasedarray_layouts/ under prisim/data/
(*) Add few text files in the subfolders of prisim/data/

In MANIFEST.in,

(*) Adjust parameters to reflect changes to data folder

In setup.py,

(*) Adjust parameters to reflect changes to data folder

In changelog_interferometry.txt,

(*) Record the changed histories

From 90b4304 (package) - now 0d8759f:
====================================

In prisim/examples/simparms/defaultparms.yaml,

(*) Update commented information on specifying external beam file
under group named beam
(*) Add diagnostic parameter option 'wait_after_run' under group
'diagnosis'

In scripts/run_prisim.py,

(*) Add option to keep python shell open or close after successful
completion based on the diagnostic parameter 'wait_after_run'

In MANIFEST.in,

(*) Include *.fits files under prisim/data/beams/

In setup.py,

(*) Include *.fits files under prisim/data/beams/ also under package
data

From d28aaaa (package) - now 2bdd6ce:
====================================

(*) Add examples/ folder under prisim/
(*) Remove examples/ folder under prisim/simparms/
(*) Move prisim/simparms to prisim/examples/simparms
(*) Add schedulers/ folder under prisim/examples/
(*) Add MWA_Aug23_obs_scheduler.txt under prisim/examples/schedulers/

In setup.py,

(*) Adjust for changes above

In MANIFEST.in,

(*) Adjust for changes above

In prisim/examples/simparms/defaultparms.yaml,

(*) Update commented information on specifying pointing file under
group named pointing information

In scripts/run_prisim.py,

(*) Modify location of default input parameters file

From eb7a9a4 (pkg) - now 3e549f9:
================================

In simparms/defaultparms.yaml,

(*) Move bandpass related parameters to a new group under bandpass
(*) Add ability to specify default or custom paths for PFB file info

In scripts/run_prisim.py,

(*) Adjust to changes to format in simparms/defaultparms.yaml

From ba4dac9 (pkg):
==================

(*) Add folder simparms/ under prisim/
(*) Add folder examples/ under prisim/simparms/ and add an
example yaml parameters file

In prisim/data/,

(*) Move simparameters.yaml to prisim/simparms and rename as
defaultparms.yaml

(*) Add folders catalogs, beams, array_layouts, phasedarray_layouts,
bandpass under prisim/data and add catalog, beam, layouts, and
bandpass files under the respective folders

In setup.py,

(*) Add keywords classifiers, maintainer, and maintainer_email
(*) Modify values under keyword package_data to include newly
included data
(*) Import glob and use it to specify scripts from the scripts
folder automatically

In MANIFEST.in

(*) Modify to include the recently added package data files

In prisim/__init__.py,

(*) Add info on maintainer and maintainer_email

From cbf524f (pkg):
==================

In setup.py,

(*) Add package dependencies under keywords install_requires and
setup_requires

In prisim/delay_spectrum.py,

(*) Remove import of unused module statsmodels

From 8fd5179 (pkg):
==================

(*) Set up a minimal installation package with dependency on package
AstroUtils
(*) Restructure to make it compatible with setup.py installation
(*) Rename interferometer_data_simulation.yaml.mpi.py to run_prisim.py
and move it scripts/ folder
(*) Move modules interfermetry.py, primary_beams.py,
delay_spectrum.py, and baseline_delay_horizon.py to prisim/ folder
(*) Adjust imports in modules interfermetry.py, primary_beams.py,
delay_spectrum.py, baseline_delay_horizon.py and the script
run_primsim.py to import appropriate modules from the AstroUtils and
PRISim modules
(*) This package has been verified to install correctly
(*) Script run_prisim was executed and verified to function as
expected

In interferometry.py,

(*) Change call to deprecated phymem_usage() in psutil module to
virtual_memory()

In delay_spectrum.py,

(*) Comment out import of aipy module
(*) Comment out deprecated global function _gentle_clean()
(*) Comment out deprecated member function clean() of class
DelaySpectrum that called the deprecated global function _gentle_clean()

From d106e08 (master), 14b0c3b (synthesis):
==========================================

(*) Merge synthesis branch (14b0c3b) onto master (d106e08) branch

From 461c706 (uniqbl):
=====================

In interferometry.py,

(*) Determine unique baselines in uniq_baselines() using r, theta,
and phi parameters of the baseline vectors

From 37d619a (synthesis):
========================

In interferometry.py,

(*) Rename member function gridUVW() to setUVWgrid() in class
ApertureSynthesis. Update docstring accordingly

From 8a84fc2 (synthesis):
========================

In interferometry.py,

(*) Add member function gridUVW() to class ApertureSynthesis along with
docstring
(*) Add and initialize attributes blc, trc, gridu, gridv, gridw,
grid_blc, grid_trc in __init__() member function of class
ApertureSynthesis
(*) Update docstring of class ApertureSynthesis

From ecf2dab (synthesis):
========================

In interferometry.py,

(*) Add member function reorderUVW() to class ApertureSynthesis
along with docstring
(*) Update docstring of class ApertureSynthesis with that of
newly added member function reorderUVW()

From 6453399 (synthesis):
========================

In interferometry.py,

(*) Add member function genUVW() to class ApertureSynthesis along
with docstring
(*) Update docstring of class ApertureSynthesis

From 461c706 (synthesis):
========================

In interferometry.py,

(*) Add new class ApertureSynthesis with a preliminary __init__()
member function and docstring

From 62f97d1 (master):
=====================

(*) Commit just to tag HERA foreground simulations paper submission
to ApJ

From 1147d95 (master):
=====================

(*) Commit version corresponding to paper draft submission for
HERA collaboration review on effects of antenna beam chromaticity and
HERA performance

From 8527d38 (master):
=====================

In interferometry.py,

(*) In observe() member function of class InterferometerArray, enforce
double precision in case of memory shortage only if input keyword
memsave is set to True

From dcb4fc0 (master):
=====================

In delay_spectrum.py,

(*) Enforce interpolated beam never exceeds unity in member function
beam3Dvol() of class DelayPowerSpectrum

From 2d3fb5e (master):
=====================

In interferometry.py,

(*) Enforce double precision while initializing visibilities from
init file in __init__() member function of class InterferometerArray

From 38d2085 (master):
=====================

In delay_spectrum.py,

(*) Check for presence of foreground strategy key in member function
subband_delay_transform() of class DelaySpectrum

From 97c2fa5 (master):
=====================

In delay_spectrum.py,

(*) Enforce double precision arithmetic in subband_delay_transform()
member function of class DelaySpectrum

From 9cde45c (master):
=====================

In delay_spectrum.py,

(*) Add input keyword fftpow in subband_delay_transform() member
function of class DelaySpectrum. Update docstring accordingly
(*) Invoke newly created function window_fftpow() in my_DSP_modules.py
inside subband_delay_trasnform() member function of class
DelaySpectrum thus replacing earlier call to windowing() function

From 5ef1f24 (master):
=====================

In delay_spectrum.py,

(*) Compute attribute subband_delay_power_spectra_resampled in
member function compute_power_spectrum() of class DelayPowerSpectrum

From c63c148 (master):
=====================

In delay_spectrum.py,

(*) Add attribute subband_delay_power_spectra_resampled in class
DelayPowerSpectrum and initialize inside member function __init__().
Modify docstring accordingly

From db814ea (master):
=====================

In delay_spectrum.py,

(*) Modify member function subband_delay_transform() of class
DelaySPectrum to compute downsampled subband delay spectrum
attribute subband_delay_spectra_resampled. Update docstring
accordingly

From aa0a8a9 (master):
=====================

In delay_spectrum.py,

(*) Add attribute subband_delay_spectra_resampled to class
DelaySpectrum. Update docstring accordingly.
(*) Newly added attribute subband_delay_spectra_resampled is
initialized in __init__() and saved in save() member functions of
class DelaySpectrum

From c29e3d5 (master):
=====================

In delay_spectrum.py,

(*) Add input keyword action to member function delay_transform()
of class DelaySpectrum. Update docstring accordingly. This input
keyword determines whether the estimated delay spectrum quantities
are to be returned and/or stored as internal attributes

From caa4a53 (master):
=====================

In delay_spectrum.py,

(*) Make multiple subband omega x bw product possible through numpy
broadcasting in function beam3Dvol(). Update docstring accordingly
(*) Account for NaN in estimating 3D beam volume in beam3Dvol()

From b2f8b2c (master):
=====================

In delay_spectrum.py,

(*) Import healpy module
(*) Add function beam3Dvol() (with docstring) to compute 3D volume
in units of Sr Hz using the squared power pattern of an antenna

From a65343d (master):
=====================

In interferometry.py,

(*) Add attribute simparms_file to class InterferometerArray and
initialize it in __init__() member function using input keyword
simparms_file or from a header keyword in init_file. Update
docstring accordingly
(*) Save attribute simparms_file in header keyword 'simparms' in
save() member function of class InterferometerArray

From 9438a63 (master):
=====================

In delay_spectrum.py,

(*) Fix bug in saving correct attribute bp for bandpass instead of
bp_wts in save() member function of class DelaySpectrum
(*) Generate power normalized window function instead of peak
normalized window in member function subband_delay_transform() of
class DelaySpectrum
(*) Determine fractional width using power normalized window function
in member function subband_delay_transform() of class DelaySpectrum

From c8dd0b2 (master):
=====================

In delay_spectrum.py,

(*) Correct visibilities after CLEANing by padding factor to keep them
at same amplitudes as before CLEANing

From c4f56de (master):
=====================

In delay_spectrum.py,

(*) Modify member function k_parallel() of class DelayPowerSpectrum to
use jacobian from dkprll_deta()

From 30c95c0 (master):
=====================

In delay_spectrum.py,

(*) Add function dkprll_deta with docstring to compute the jacobian to
transform from delays to k_parallel

From f79570e (master):
=====================

In delay_spectrum.py,

(*) Add and initialize attribute horizon_kprll_limits for class
DelayPowerSpectrum in member function __init__(). Update docstring
accordingly
(*) Add and assign values to key 'horizon_kprll_limits' under
attribute subband_delay_power_spectra in member function
compute_power_spectrum() of class DelayPowerSpectrum. Update
docstring accordingly.

From d30bb7a (master):
=====================

(*) Add figparameters_HERA.yaml to git repo

In delay_spectrum.py,

(*) Add and initialize keys 'cc_skyvis_net' and 'cc_vis_net' under
attribute dps in member function __init__() of class
DelayPowerSpectrum. Update docstring acccordingly
(*) Compute values under keys 'cc_skyvis_net' and 'cc_vis_net' under
attribute dps in member function compute_power_spectrum() of class
DelayPowerSpectrum. 
(*) Compute values under keys 'cc_skyvis_net' and 'cc_vis_net' under
attribute subband_delay_power_spectra in member function
compute_power_spectrum() of class DelayPowerSpectrum. Update docstring
of class DelayPowerSpectrum accordingly
(*) Fix all delay power spectrum calculations to perform square of the
absolute value instead of simply squaring in member function
compute_power_spectrum() of class DelayPowerSpectrum
(*) Assign attribute lags in member function delayClean() of class
DelaySpectrum to match the size of attribute skyvis_lag

From 0d5734f (master):
=====================

In delay_spectrum.py,

(*) Initialize values under keys 'skyvis_net_lag' and 'vis_net_lag'
of attribute subband_delay_spectra in member function __init__() of
class DelaySpectrum. Update docstring describing this attribute
accordingly
(*) Compute values under keys 'skyvis_net_lag' and 'vis_net_lag'
of attribute subband_delay_spectra in member function
subband_delay_transform() of class DelaySpectrum
(*) Fix bug in __init__() member function of class DelaySpectrum to
read attributes cc_lags and cc_freq using the right keys that were
used in save() member function of class DelaySpectrum

From 66873dc (cosmo):
====================

In delay_spectrum.py,

(*) Add required input ia_outfile for saving interferometer array
visibilities information inside save() member function of class
DelaySpectrum. Update docstring of member function accordingly

From 36d9b97 (cosmo):
====================

(*) Add config file ccparameters.yaml for setting delay CLEAN parameters
to git repo

In delay_spectrum.py,

(*) Add and initialize attribute subband_delay_power_spectrum in
class DelayPowerSpectrum. Update docstring of class DelayPowerSpectrum
accordingly
(*) Add member function compute_power_spectrum() under class
DelayPowerSpectrum to compute delay power spectrum (in power spectrum)
units from its delay spectrum. Add description of this member function
to docstring of class DelayPowerSpectrum
(*) Assign values to attribute subband_delay_power_spectra inside
member function compute_power_spectrum of class DelayPowerSpectrum

From 7df4252 (cosmo):
====================

In delay_spectrum.py,

(*) Modify saving and initialization of attribute
subband_delay_spectra of class DelaySpectrum in member functions
save() and __init__() member functions respectively in accordnace with
changes in previous commit
(*) Change default file extension to save delay spectrum information
to .ds from .cc in save() member function of class DelaySpectrum

From 7962b2c (cosmo):
====================

In delay_spectrum.py,

(*) Restructure member function subband_delay_transform() of class
DelaySpectrum to compute subband delay spectra for both CLEANed and
simulated visibilities in a single call. Modify docstring of member
function and class DelaySPectrum accordingly

From 81f0345 (cosmo):
====================

In delay_spectrum.py,

(*) Save attribute subband_delay_spectra in member function save() of
class DelaySpectrum
(*) Load attribute subband_delay_spectra from saved file in member
function __init__() member function of class DelaySpectrum
(*) Enforce correct usage of keyword input action in member function
subband_delay_transform() of class DelaySpectrum as described in its
docstring

From 3441ef1 (cosmo):
====================

In delay_spectrum.py,

(*) Rename member function multi_window_delay_transform() of class
DelaySpectrum to subband_delay_transform(). Modify class docstring
accordingly
(*) Rename attribute multiwin_delay_transform of class DelaySpectrum
to subband_delay_spectra. Update docstring accordingly
(*) Add few more keys and values to the output of member function
subband_delay_transform() of class DelaySpectrum. Update docstring
of member function accordingly
(*) Add description of attribute subband_delay_spectra in docstring
of class DelaySpectra

From dc23985 (cosmo):
====================

In delay_spectrum.py,

(*) Change usage of keyword input action in member functions of class
DelayPowerSpectrum. Update docstrings accordingly

From 54f7a5a (cosmo):
====================

In delay_spectrum.py,

(*) Add attributes dps, Jy2K and K2Jy and their docstrings to class
DelayPowerSpectrum
(*) Add member function compute_power_spectrum() with docstring to
class DelayPowerSpectrum. Update docstring of class DelayPowerSpectrum
accordingly

From 77bf541 (master):
=====================

In delay_spectrum.py,

(*) Import cosmology module from astropy
(*) Import fundamental constants from scipy
(*) Add class DelayPowerSpectrum to hold cosmological delay power
spectrum information for delay spectrum object
(*) Add member functions __init__(), comoving_los_depth(), k_perp(),
k_parallel(), comoving_transverse_distance(), comoving_los_distance()
with docstrings. Add their description in docstring of class
DelayPowerSpectrum
(*) Update docstring of class DelaySpectrum
(*) Make minor changes in save() member function of class
DelaySpectrum

From 1816869 (parallel):
=======================

In delay_spectrum.py,

(*) Minor change to docstring of function complex1dClean()

From e262697 (master):
=====================

In delay_spectrum.py,

(*) Add parallelization functionality in member function delayClean()
of class delaySpectrum using keyword inputs parallel and nproc.
Update docstring of member function and class accordingly.
(*) Import newly written module writer_module to handle printing of
progress bar on terminal
(*) Add input keywords progressbar, pid and progressbar_yloc to
function complex1dClean() to display progress bars in case of
parallel processing. Update docstring accordingly
(*) CLEAN noise-added delay spectrum instead of doing it twice on
noiseless delay spectrum in member function delayClean() of class
delaySpectrum

From dfeabae (master):
=====================

In interferometry.py,

(*) Add functionality in member function save() of class
InterferometerArray to save essential attributes of the class to
numpy compatible NPZ format. Modify docstring of save() member
function accordingly

From 3ad024e (delay-transform):
==============================

In delay_spectrum.py,

(*) Use input freq_wts in member functions delayClean() and clean()
of member function DelaySpectrum
(*) Minor change in definition of rms in function complex1dClean()
(*) Add member function multi_window_delay_transform() with docstring
to class DelaySpectrum. Modify class docstring accordingly

In interferometer_array_data_simulation.yaml.mpi.py, add capability
to perform simulations with achromatic beams from a variety of
different input beam formats

From 64bf959 (delay-transform):
==============================

In delay_spectrum.py,

(*) Add and initialize attributes cc_lags, cc_freq, cc_lag_kernel
in __init__() member function of class DelaySpectrum. Update
docstring accordingly
(*) Modify initialization of attribute lags from None to actual
values in __init__() member function of class DelaySpectrum
(*) Estimate attributes cc_lags, cc_freq and cc_lag_kernel in
delayClean() member function of class DelaySpectrum
(*) Save attributes cc_lags, cc_freq, and cc_lag_kernel in save()
member function of class DelaySpectrum

In changelog_interferometry.txt,

(*) Fix a minor typo in the changelog of previous commit

From 40531dc (delay-transform):
==============================

In delay_spectrum.py,

(*) Add global function complex1dClean() (with docstring) to perform
1D complex-valued clean.
(*) Add member function delayClean() (with docstring) to class
DelaySpectrum. Update its docstring accordingly

From f5fff3d (delay-transform):
==============================

In delay_spectrum.py,

(*) Remove unused attribtues skyvis_freq, vis_freq, vis_noise_freq
and their initialization from __init__() member function of class
DelaySpectrum
(*) Add value checking before saving attributes to disk in member
function save() of class DelaySpectrum
(*) Add ability to initialize an instance of class DelaySpectrum
using an init_file by adding a keyword input init_file in __init__()
member function of class DelaySpectrum

From c2bc67a (delay-transform):
==============================

In delay_spectrum.py,

(*) Remove attributes baselines, baseline_lengths, baseline_coords,
phase_center, phase_center_coords, pointing_center, pointing_coords,
lst, timestamp and their initialization from class DelaySpectrum
and its __init__() member function. Update docstring accordingly.
Update their occurrence throughout with corresponding attributes from
the attribute ia that contains interferometer array simulated
information
(*) Save bandpass attribute bp to disk in member function save() of
class DelaySpectrum

From 5f81c08 (delay-transform):
==============================

In delay_spectrum.py,

(*) Add and initialize attributes cc_skyvis_lag, cc_skyvis_res_lag, 
cc_skyvis_net_lag, cc_vis_lag, cc_vis_res_lag, cc_vis_net_lag, 
cc_skyvis_freq, cc_skyvis_res_freq, cc_sktvis_net_freq, cc_vis_freq,
cc_vis_res_freq, cc_vis_net_freq, clean_window_buffer in __init__()
member function of class DelaySpectrum
(*) Add descriptions of newly added attributes in docstring of class
DelaySpectrum
(*) Add save() member function (with docstring) to class
DelaySpectrum. Update docstring of class DelaySpectrum accordingly

From 2b0c750 (delay-transform):
==============================

In delay_transform.py,

(*) Add input keyword downsample to member function delay_transform()
of class DelaySpectrum. Update docstring accordingly
(*) Downsampling in member function delay_transform() of class
DelaySpectrum is done depending on keyword input downsample
(*) Add member function clean() to class DelaySpectrum. Update
docstrings accordingly
(*) Add a global function _gentle_clean() for delay deconvolution
which automatically decides where the relative levels of inside and
outside residuals are to decide the stopping criterion. Needs a
docstring, currently has none
(*) Add member functions get_horizon_delay_limits() and
set_horizon_delay_limits() (with docstrings) to class DelaySpectrum.
Update docstring of class DelaySpectrum accordingly
(*) Add and initialize attribute horizon_delay_limits in __init__()
member function of class DelaySpectrum. Update docstring of class
DelaySpectrum accordingly

In baseline_delay_horizon.py,

(*) Add function horizon_delay_limits() (with docstring) to estimate
the horizon delay limits for given baselines and given phase centers
(*) Update docstring of delay_envelope()

From 0a469aa (delay-transform):
==============================

(*) Add delay_spectrum.py module to git repo

In delay_spectrum.py,

(*) Add class DelaySpectrum (with attributes and member functions)
along with docstring
(*) Add member functions __init__() and delay_transform() along with
docstrings under class DelaySpectrum

From 5f025c8 (vis-debug):
========================

(*) Add YAML based visibility delay CLEAN script to git repo

In interferometer_array_data_simulation.yaml.mpi.py,

(*) Add ability to use chromatic or achromatic beams while using
external beams

In simparameters.yaml,

(*) Add inputs for specifying usage of chromatic or achromatic beams

From 4c7ba61 (master) + 755ef77 (healpix_pbeam):
===============================================

(*) Merge healpix_pbeam branch onto master

From e13fa00 (branch vis-debug):
===============================

In interferometry.py,

(*) Determine visibility weights per frequency channel instead of
an average frequency in observe() member function of class
InterferometerArray

From 7f46bcc (branch vis-debug):
===============================

In interferometry.py,

(*) Calculate visibility weights differently from source FWHM widths
in observe() member function of class InterferometerArray

In interferometer_array_data_simulation.yaml.mpi.py and
simparameters.yaml,

(*) Change variables n_snaps and t_snap respectively to n_acc and t_acc

From a0fca58 (branch vis-debug):
===============================

(*) Add MIT license in LICENSE.txt and add to git repo

From 2669b7f (branch vis-debug2):
================================

In interferometry.py,

(*) Determine visibility weights per frequency channel instead of
an average frequency in observe() member function of class
InterferometerArray

From 2bd2b1a (branch healpix_pbeam):
===================================

(*) Intermediate commit before starting new branch

From a0fca58 (branch healpix_pbeam):
===================================

(*) In simulator, add functionality to parallelize along frequency
axis

In interferometry.py,

(*) Fix bug by changing use of self.channels to self.freq in member
function append_settings() of class ROI_parameters.
(*) Check for emptiness of attribute pinfo before writing it to
FITS file in member function save() of class ROI_parameters.
(*) Update docstring of member function concatenate() of class
InterferometerArray
(*) Add checking to see if delay transform quantities exist before
concatenating them in concatenate() member function of class
InterferometerArray

From c5cb9fe (branch timing):
============================

In the 'main' simulator code,

(*) Add definition of a sidereal day and adjust conversions between
actual time and sidereal time using this factor

From d568d1b (branch timing):
============================

In interferometry.py,

(*) Type check for timestamps in save() member function of class
InterferometerArray and save it in appropriate format
(*) Import distutils for version checking of Astropy modules
(*) Add global function _astropy_columns() (only for internal use) to
check for Astropy version and create the FITS column data
appropriately
(*) Import psutil and comment out import of os module
(*) Obtain available memory using psutil routines which replaces the
use of os.popen() inside observe() member function. Comment out the
use of os.popen() 

From 5724828 (branch timing):
============================

In interferometry.py,

(*) Add more precision to timestamps saved in member function
save() of class InterferometerArray

From 2e0aca5 (branch timing):
============================

In interferometry.py,

(*) Fix bug in creating a record array of labels in member
function save() of class InterferometerArray
(*) Add input keyword do_delay_transform to member function
phase_centering() of class InterferometerArray which will
optionally recompute delay transform of the visibilities after they
are rotated to the new phase center

From 19bea28 (branch timing):
============================

In simparameters.yaml,

(*) Make changes to initial conditions of drift and tracking
pointing parameters

In interferometer_array_data_simulation.yaml.mpi.py,

(*) Import ephem module
(*) Modify inputs to handle timing and timestamps tied to the
longitude of the observatory
(*) Needs more rigorous testing on accuracy of timing as well as
making the change consistent throughout the simulation script.
(*) Test to work for automated drift and track runs

From 30bc19a of Interferometry:
==============================

In interferometry.py,

(*) Initialize longitude in __init__() member function of class
ROI_parameters
(*) Save longitude information in save() member function of
class ROI_parameters
(*) Initialize longitude in __init__() member function of class
InterferometerArray
(*) Save longitude information in save() member function of
class InterferometerArray

From 30b511a of Interferometry:
==============================

In interferometry.py,

(*) Initialize latitude in __init__() member function of class
ROI_parameters
(*) Remove latitude keyword input to member function append_settings()
of class ROI_parameters
(*) Change all occurrences of latitude to key 'latitude' of dictionary
attribute telescope of instance ROI_parameters
(*) No default latitude for instances of class ROI_parameters while
docstring indicated VLA latitude will be used as default. Change
docstring accordingly
(*) Save latitude information in save() member function of
class ROI_parameters

From c802b72 of Interferometry:
==============================

(*) Add main programs EoR_and_foregrounds_snapshot_delay_spectra.py,
skymodel_manager.py. The latter converts sky models in (non-)HEALPIX
format(s) to HEALPIX format

(*) Fix major bug in
interferometer_array_theory_units_figures_producer.py where healpy
module's cartview() function returned a map in 'ecliptic' coordinates
rather than in 'equatorial' coordinates. Fix this by setting input
parameter coord in cartview() to 'C' instead of 'E' (happening earlier)

From e874d67 of Interferometry:
==============================

In interferometry.py,

(*) Add member function multi_window_delay_transform() to class
InterferometerArray

From ec3f10a of Interferometry:
==============================

(*) Add EoR signal simulation in main level programs. No change in
modules

From d26fe5d of Interferometry:
==============================

(*) Further testing of main level programs. No change in modules

From e04fcb0 of Interferometry:
==============================

(*) Develop some preliminary global EoR codes
(*) Start developing yaml-based input parameters file for simulations

From 1381c2e of Interferometry:
==============================

In interferometry.py,

(*) Update docstring of class InterferometerArray

From 0de453c of Interferometry:
==============================

In interferometry.py,

(*) In __init__() member function of class InterferometerArray,
modify initialization of attribute labels from init_file as a list of
tuples
(*) In save() member funciton of class InterferometerArray, add
extension name for primary HDU as 'PRIMARY'
(*) In save() member function of class InterferometerArray, write
Tsys without checking conditions of its existence

From 8dc191c of Interferometry:
==============================

In interferometry.py,

(*) Modify save() member function of class InterferometerArray to
handle baseline labels as a list of tuples which now saves it in two
columns

From 2873037 of Interferometry:
==============================

In interferometry.py,

(*) In baseline_generator(), return antenna_pairs as a numpy record or
structured array of tuples under fields 'A1' and 'A2'
(*) Change docstring accordingly

From 402fde6 of Interferometry:
==============================

In interferometry.py,

(*) Add member function conjugate() to class InterferometerArray

From c50675c of Interferometry:
==============================

In interferometry.py,

(*) Modify function baseline_generator() to return baseline labels as
tuples made of antenna labels
(*) Remove unwanted commented sections

From d33b4ff of Interferometry:
==============================

In interferometry.py,

(*) Add a function to create circular antenna layout, namely,
circular_antenna_array()

From f36d152 of Interferometry:
==============================

In interferometry.py,

(*) In member function save() of class ROI_parameters, rename input
parameter file to outfile in order to not confuse with in-built python
variable 'file'
(*) In member function __init__() of class ROI_parameters, modify to
read pointing center information which was getting skipped earlier

From 1d6d03d of Interferometry:
==============================

In primary_beams.py,

(*) Add keyword input short_dipole_approx to dipole_field_pattern()
and primary_beam_generator()
(*) Change docstrings accordingly

From 13bb741 of Interferometry:
==============================

In primary_beams.py,

(*) Add keyword input parameter half_wave_dipole_approx to
primary_beam_generator(). Change code and docstring accordingly

From 9743a28 of Interferometry:
==============================

In interferometry.py,

(*) In member function save() of class InterferometerArray, rename input
parameter file to outfile in order to not confuse with in-built python
variable 'file'
(*) In member function concatenate() of class InterferometerArray,
concatenate attribute projected_baselines which was not done earlier
(*) In save() member function of class ROI_parameters, add field
EXTNAME='PRIMARY' to the primary header extension while writing out the
information to FITS file on disk

In primary_beams.py,

(*) Use correct max value of ground_pattern instead of a fixed value 2

From c13ae50 of Interferometry:
==============================

Add new main programs to git version control

In interferometry.py,

(*) In append_settings() member function of class ROI_parameters,
force primary beam storage to be of type float32 to save memory

From 0d217a8 of Interferometry:
==============================

In interferometry.py,

(*) In antenna_power(), move 'element_locs' from being a key under
dictionary pinfo to that under dictionary telescope
(*) Test these changes in branch phased_array by adjusting main
programs. Find them to be compatible after adjustments.

From dc7db1e of Interferometry:
==============================

In interferometry.py,

(*) In class ROI_parameters, move key 'element_locs' from being a ley
in dictionary pointing_info to that in dictionary telescope in both
class attribute and input parameter in member function append_settings()
(*) Make changes accordingly in member functions __init__(),
append_settings() and save()
(*) Change docstring accordingly

From 31d7cc4 of Interferometry:
==============================

In primary_beams.py,

(*) In primary_beam_generator(), move 'element_locs' from being a key
in input parameter dictionary pointing_info to being a key in input
parameter dictionary telescope.
(*) Change docstring accordingly.

In interferometry.py,

(*) Fix a bug in antenna_power() where 'element_locs' for phased array
power pattern computation was not being used and therefore was not
functional.
(*) Change docstring accordingly

From 61fd4c9 of Interferometry:
==============================

In interferometry.py,

(*) Create docstring for antenna_power()

From c1e0049 of Interferometry:
==============================

In interferometry.py,

(*) Make uniq_baselines() also return indices of selected baselines.
Change docstring accordingly
(*) Make hexagon_generator() also return antenna identifiers. Change
docstring accordingly

From b1ebe5c of Interferometry:
==============================

In interferometry.py,

(*) Enhance functionality of uniq_baselines() by returning the count of 
unique, redundant or non-redundant baselines as applicable 
(*) Change docstring of uniq_baselines() accordingly

From 0cbdd7d of Interferometry:
==============================

In interferometry.py,

(*) Make unique baseline estimation more accurate in uniq_baselines()
(*) Adjust code to handle updates to Astropy while saving to FITS files

From b4ce5b4 of Interferometry:
==============================

In interferometry.py,

(*) Add new function antenna_power() to compute antenna power after 
integrating a sky model over the sky weighted by the power pattern

In primary_beams.py,

(*) Fix a bug in array_field_pattern() by specifying nrand=1 when nrand 
not provided in input parameter dictionary pointing_info
(*) Modify docstring of primary_beam_generator() slightly

From 22710be of Interferometry:
==============================

In interferometry.py,

(*) Rename catalog module alias from CTLG to SM
(*) Rename sky model class SkyModel_new to SkyModel to reflect changes in 
catalog module
(*) Adapt main programs to be compatible with these changes

From ea35571 of Interferometry:
==============================

In interferometry.py,

(*) Remove useless commented lines in class InterferometerArray
(*) Comment out the defunct class Interferometer

From 8c14608 of Interferometry:
==============================

Note that 8c14608 was a redundant commit with no substantial changes from 
the previous commit e41a005

In interferometry.py,

(*) Adapt classes ROI_parameters and InterferometerArray to be compatible while
using the modified module catalog by replacing the use of classes Catalog and 
SkyModel with SkyModel_new
(*) Adapt main programs to be compatible with above changes

From 2a6938b of Interferometry:
==============================

In primary_beams.py,

(*) Add random realization capability for delays and gains in the settings of
the beamformer in array_field_pattern()
(*) change docstring accordingly
(*) Change primary_beam_generator() to be compatible with the change above 

From bc17d44 of Interferometry:
==============================

In primary_beams.py,

(*) Remove input parameters gains and gainerr and make them as part of input
dictionary parameter pointing_info in array_field_pattern()
(*) Change docstring of array_field_pattern() accordingly
(*) Modify primary_beam_generator() to pass gain and gainerr as part of a
dictionary to array_field_pattern() instead of as individual input parameters

From c28f55a of Interferometry:
==============================

In primary_beams.py,

(*) Modify array_field_pattern() to take and process input parameter specifying 
gain errors. 
(*) Modify primary_beam_generator() to pass input parameter specifying gain
errors
(*) Update docstrings accordingly
(*) Adapt MWA_interferometer_array_observing_run_data_simulation.mpi.py to make
use of the input parameter gainerr

From c1d5cb5 of interferometry:
==============================

In interferometry.py,

(*) Adjust code to handle updates to Astropy while saving to FITS files

From cd410da of interferometry:
==============================

In interferometry.py,

(*) Remove the undeveloped function antenna_generator() 
(*) Add a new function hexagon_generator() which will generate antenna 
locations on a hexagnal grid
(*) Fix a bug in baseline_generator() when the input antenna 
locations only have x and y but no z component.
(*) Add a new function uniq_baselines() that can determine all the
unique or only redundant or only non-redundant baselines from any given
set of baselines

From 1509599 of interferometry:
==============================

In primary_beams.py,

(*) Fixed a major bug in the usage of diameter in the expression for an airy
pattern in airy_disk_pattern()
(*) Fixed a bug in primary_beam_generator() where frequency input parameter
even if supplied as a scalar is converted to an array
(*) Fixed a bug in primary_beam_generator.py where in the call to 
dipole_field_pattern(), dipole_coords was being passed as 'dircos' instead of, 
more generally, the value of the key 'occords' in dictionary telescope
(*) Ensured ground plane computation does not happen for a dish shaped antenna
element in primary_beam_generator()
(*) Ensured that the beam pattern for points outside the horizon are forced to
zero in airy_disk_pattern()

(*) Fixed a bug where A_eff estimate was the same for most antenna shapes 
independent of their size.

from d703b37 of interferometry:
============================== 

In interferometry.py,

(*) Fixed a bug to check if key 'id' is present in attribute telescope before
computing primary beam in member function append_settings() of class
ROI_parameters

In primary_beams.py,

(*) Removed reference of ground plane in the call to dipole_field_pattern()
while using telescope id = 'mwa_dipole'. This is because ground plane pattern
effect has been detached from dipole field pattern
(*) Fixed bugs when telescope is set to mwa_dipole in primary_beam_generator()

from 9618b44 of interferometry:
===============================

In interferometry.py,

(*) Changed object class definition of class ROI_parameters and
InterferometerArray to have the modern definition instead of the old one. In 
other words, they now inherit from Python's default "object"

from v1.07 of interferometry:
============================

In interferometry.py,

(*) Added a member function project_baselines() to class InterferometerArray. 
This projects baseline vectors with respect to a specified direction on the sky.
(*) Modified save() member function of class InterferometerArray to write out
projected baselines
(*) Modified __init__() member function of class InterferometerArray to read in
projected baselines from the FITS file as well as initialize it to None if not
initialized from init_file. Modified docstring accordingly
(*) Modified docstring of class InterferometerArray about description and usage
of new member function project_baselines()
(*) Modified docstring of class InterferometerArray about description and usage
of new attribute projected_baselines

from v1.06 of interferometry:
============================

In interferometry.py,

(*) Added a comment to docstring of class Interferometer that it is defunct and
to use class InterferometerArray instead
(*) In the __init__() member function of class InterferometerArray, changed the
assignment of 'jy' to attribute flux_unit which was previously wrongly assigned
to attribute skycoords
(*) Added a new class ROI_parameters that stores the information on skymodel 
along with the region of interest and primary beams across different snapshots.
This is to save redundant computations inside observe() member function of class
InterferometerArray
(*) Modified observe() member function of class InterferometerArray to use
pre-computed values for regions of interest and the corresponding primary beams
for the foreground model such as the information provided by instances of class
ROI_parameters. If these pre-computed values are not provided in input keyword
parameter roi_info, the regions of interest and corresponding primary beams are
estimated inside the member function. The input keywrod parameter pb_info is used
to estimate the primary beam values for the regions of interest. Changed the
docstring accordingly.
(*) Modified __init__() member function of class InterferometerArray to
initialize attribute telescope to a dictionary instead of string. This can be
done both from an init file as well as from input parameters supplied to
__init__(). Changed docstring accordingly.
(*) Modified save() member function of class InterferometerArray to write the
dictionary attribute telescope into the FITS file.
(*) In class InterferometerArray, changed docstring to accommodate the use of a
dictionary inside the keyword input 'telescope' under key named 'ground_modify'
which will be used when involing ground_plane_field_pattern(). 
(*) Updated docstring of class InterferometerArray to reflect updates on
member functions generate_noise(), add_noise(), phase_centering(),
delay_transform(), concatenate(), and save() which should have been done in 
earlier revisions but wasn't. 
(*) Remove from docstring of class InterferometerArray references to a 
non-existing member function noise_estimate()
(*) In __init__() member function of class InterferometerArray, modified the
docstring to describe the input parameter init_file.
(*) Made very minor changes to docstring of member function save() of class
InterferometerArray

In primary_beams.py,

(*) Added a new function array_field_pattern() that computes the field pattern
given beamformer delays or pointing center. The array of antenna elements could
be of any arbitrary shape. This beamforming will supercede
isotropic_radiators_array_field_pattern() in functionality because any array 
shape can be simulated (including delay jitter effects) but may be slower than
isotropic_radiators_array_field_pattern() due to lack of an analytical formula
and if the number of sky positions are large.
(*) Fixed a bug in dipole_field_pattern() in the formula for field pattern 
without half wave dipole approximation. Changed the argument of a cosine function
from arg1 * arg2 to arg1 * cos(arg2).
(*) In dipole_field_pattern(), replaced arg1 and arg2 with actual variables and
implemented numpy array broadcasting
(*) In dipole_field_pattern(), default value of dipole_orientation was set to
None, but had actually did not set any default orientation. Now the default None
sets the dipole orientation along east. Changed docstring accordingly.
(*) Moved the computation of ground plane effect from inside
dipole_field_pattern() to a separate function ground_plane_field_pattern().
Modified inputs and docstring accordingly. 
(*) New function ground_plane_field_pattern() created to estimate the ground 
plane effects independently rather than computing it alongside the dipole field
pattern.
(*) In primary_beam_generator(), for MWA and MWA_dipole, changed the default of
keyword half_wave_dipole_approx from True to False.
(*) In primary_beam_generator(), for MWA, modified the inputs to have a keyword 
input pointing_info which contains information about the pointing center, delay
settings, element locations, etc. in accordance with the requirements for 
array_field_pattern(). If these inputs are provided, array_field_pattern() is
preferred over isotropic_radiators_array_field_pattern() in the case of MWA. 
Modified the docstring accordingly.
(*) In primary_beam_generator(), changed the input parameter telescope from 
holding a string to a dictionary which defines the antenna element properties.
The key 'id' can be used to use default values for known telescopes. If 'id' is
not specified, element properties such as shape, size and orientation can be used
to compute the element pattern. Changed the docstring accordingly.
(*) In primary_beam_generator(), call to airy_disk_pattern() for a HERA dish had
skyunits hard-coded to 'altaz' which has now been replaced with generic skyunits.
(*) In airy_disk_pattern(), changed variables 'qty' and 'ef' to 'pattern' and
removed numpy copies.
(*) In ground_plane_field_pattern(), added a keyword input named 'modifier' that
contains specifications to modify the generated ground plane pattern. Changed
docstring accordingly.
(*) In primary_beam_generator(), changed docstring to accommodate the use of a
dictionary inside the keyword input 'telescope' under key named 'ground_modify'
which will be used when involing ground_plane_field_pattern(). 
(*) In ground_plane_field_pattern(), changed the inner argument of the analytical 
expression from cos(90-altitude) to sin(altitude) to be consistent with EM texts
such as Jordan & Balmain.

---------------------------------------------------------------------------------
from v1.05 of interferometry:
============================

In primary_beams.py,

(*) In primary_beam_generator(), changed the default MWA dipole length to 0.74 m
from 1.1 m. 
(*) In primary_beam_generator(), if the telescope value is set to 'mwa_dipole', 
a default ground plane height of 0.3 m is used in the call to the dipole field
pattern. This does not apply if the telescope is anything other than 
'mwa_dipole'. 0.3 m was arrived at by using 10 cm elevation above the ground and
40 cm is the vertical height of the bowtie antenna and hence 20 cm is the 
half-height. Thus the the center of the antenna is 30 cm above the ground plane.
(*) In dipole_field_pattern(), corrected the expression for ground plane effect 
from cos(sin) to sin(cos). This now ensures that the gain is zero at the horizon.
(*) In dipole_field_pattern(), max_pattern is set to 2.0 if computing ground 
plane effect.

---------------------------------------------------------------------------------
from v1.05 of interferometry:
============================

In primary_beams.py,

(*) Added a new function to compute airy disk patterns of uniformly illuminated
circular disks. The funciton is named airy_disk_pattern()
(*) Modified primary_beam_generator() to accept 'hera' for telescope input and 
compute the primary beam using the newly added airy_disk_pattern()
(*) Replaced the use of variable phase_center in all routines with 
pointing_center.

In baseline_delay_horizon.py,

(*) Changed docstring of delay_envelope() to indicate that maximum delay is 
given by [:,:,0]-[:,:,1]

In interferometery.py,

(*) In baseline_generator(), added an input keyword ant_id to keep track of
antennas in the baseline vectors. The output now also contains ids of the 
antenna pair. Docstring changed accordingly
(*) In baseline_generator(), when antenna locations are specified as a numpy
array, baselines were calculated as i-j for j > i. THis is inconsisntent with
baselines if the input was a list of lists where baseliens were calculated as 
j-i for j > i. Now they are all made consistent with j-i for j>i.
(*) Added Tsys initialization from init_file in __init__() member function of
class InterferometerArray
(*) Added a new attribute lag_psf that denotes the inverse fourier transform of
bandpass shape to class InterferometerArray. It is initialized in __init__()
member function and computed in member function delay_transform(). It is saved
using save() member function
(*) Added description of attribute bp_wts to docstring of class
InterferometerArray which was not done earlier
(*) Modified delay_transform() member function of class InterferometerArray to
have output in units of Jy Hz instead of Jy as before. This was done by 
multiplying the IFFT by number of frequency channels (including padded channels, 
if any) and the frequency resolution. This automatically makes the amplitude
invariant to padding and hence no need to correct for amplitudes due to padding
factor at the downsampling step. Hence, the amplitude correction introduced in 
the previous version is now removed.
(*) Replaced use of phase_center in calling primary_beam routines with 
pointing_center to reflect the same changes made in the primary_beam routines.

---------------------------------------------------------------------------------
from v1.04 of interferometry:
============================

In interferometry.py,

(*) Removed the unused attribute sample_density from member function __init__()
of classes Interferometer and InterferometerArray
(*) Added two member functions generate_noise() and add_noise() which generate 
and add noise to the sky visibilities under class InterferometerArray
(*) Removed the computation and addition of noise on visibilities in observe()
member function of class InterferometerArray and moved it to member functions
generate_noise() and add_noise() respectively
(*) Removed a factor 2 while estimating memory_required in member function
observe() of class InterferometerArray. This means size of vis_wts is ignored
since it anyway follows numpy array broadcasting rule
(*) Removed a factor 2 while estimating the downsize_factor if memory shortage 
is detected in observe() member function of class InterferometerArray
(*) memory_required in member function observe() of class InterferometerArray is
now estimated from free+cached+buffer memory instead of only from free memory
(*) In member function delay_transform() of class InterferometerArray, changed
the delay transform to be IFFT instead of FFT to be consistent with the sign 
convention used in creating the visibilities along frequency axis in member 
function observe() and docstring changed accordingly
(*) In member function delay_transform() of class InterferometerArray, replaced
len(self.timestamp) with self.n_acc
(*) In member function save() of class InterferometerArray, now write another
extension to the FITS file containing Tsys information.
(*) In member function save() of class InterferometerArray, now write another
extension to the FITS file containing timestamp information. Timestamps are now
written as 12-character strings
(*) In member function save() of class InterferometerArray, changed the
formatting of writing the extension table containing labels. Labels are now 
written as 5-character strings
(*) In member function __init__() of class InterferometerArray, made changes to
initialization from init_file so it is compatible with output of save() member 
function.
(*) In member function __init__() of class InterferometerArray, made changes to
data type of attributes vis_freq, skyvis_freq, vis_noise_freq, skyvis_lag, 
vis_lag, and vis_noise_lag so they can hold complex values
(*) In member function delay_transform() of class InterferometerArray, padding
with zeros reduced the amplitude and hence the amplitudes are now corrected 
based on the padding factor
(*) Added attributes phase_center and phase_center_coords to class
InterferometerArray. These are updated accordingly in all the member functions
of this class. By default, these are made equal to the pointing center and 
pointing coordinates.
(*) Added member function phase_centering() to rotate visibility phases to any
given phase center.
(*) Phase center information is now saved in save() member function and also
initialized in __init__() member function through init file in class
InterferometerArray. It is also concatenated in member function concatenate().
(*) In member function concatenate() of class InterferometerArray, added the
concatenation of attribute bp_wts which was missing earlier

In primary_beams.py,

(*) Renamed skyunits to skycoords in the dosctring of
isotropic_radiators_array_field_pattern()  

---------------------------------------------------------------------------------
from v1.03 of interferometry:
============================

In interferometery.py,

(*) Added docstring in class InterferometerArray describing the member function
observing_run()
(*) Made minor corrections in print statements and docstrings inside the class
InterferometerArray to indicate they belong to that class and not the class
Interferoemter.
(*) Enabled __init__() member function of class InterferometerArray to initialize
from data in a file through the input parameter init_file which may have been 
created using the save() member function
(*) In member function save() of class InterferometerArray, now save the
attribute skycoords as a keyword in the primary header.
(*) In member function save() of class InterferometerArray, now save the
attribute keywords bp_wts and labels as separate extensions
(*) Following up with the change in the nature of attribute frequency in class
Catalog in the module catalog.py under the class of "general" modules, its usage
is now modified to reflect its nature as an array in both classes Interferometer
and InterferometerArray
(*) Modified error checking in __init__() member function of class
InterferometerArray to be compatible with initializing from input arguments or 
from init_file
(*) Tweaked a few places in member function observe() of class 
InterferoemterArray to have numpy array broadcasting compatibility
(*) In member function save() of class InterferometerArray, the baseline labels 
are now saved as a binary table extension instead of an image table used before
because the labels are strings.

---------------------------------------------------------------------------------
from v1.02 of interferometry:
============================

In interferometry.py,

(*) In member function observe() of class Interferometer, removed the product by
the bandpass function in determining the sky visibilities and subsequently the
measured visibilities. Instead bandpass is kept seprate and can be modified or
applied as per need.
(*) In member function delay_transform() of class Interferometer, bandpass shape
is multiplied to the visibilities in the frequency domain before computing the
delay transform.
(*) In member function save() of class Interferometer, the bandpass shapes as a
function of snapshot instance and frequency are saved in an extension as an
array.
(*) In member function save() of class Interferometer, the LST and pointing
centers are stored as an extension table
(*) In class Interferometer, added description of member function observing_run()
to the docstring. Renamed mention of noise_estimate() in the docstring of class
Interferometer to band_averaged_noise_estimate()
(*) In class Interferometer, modified the description of class attribute bp in 
the docstring
(*) In class Interferometer's __init__() and observing_run() member functions, 
changed from 'channels *= ...' to 'channels = channels * ...' because the former
modifies the original input argument as well due to passing by reference 
(*) In member function observing_run() of class Interferometer, commented the
usage of milestones and printing of progress percentage and replaced it with use
of the progressbar module.
(*) In member function delay_transform() of class Interferometer, added input 
arguments, namely, pad and verbose to the function. pad provides a padding before
the delay transform and also determines the downsampling factor of the delay
spectrum after the delay transform. Setting verbose prints diagnostic and
progress messages.
(*) Added a new attribute bp_wts to class Interferometer. This attribute is to
serve the purpose of any additional frequency weighting on top of the inherent
bandpass shape, represented by the attribute bp.
(*) Added an input parameter 'freq_wts' to member function delay_transform() of
class Interferometer which denotes the additional frequency weighting to be
applied in additional to the inherent bandpass shape while performing the delay
transform. The attribute bp_wts is assigned with this freq_wts.
(*) Modified member function __init__() of class Interferometer to intialize the
newly included attribute bp_wts
(*) Modified member function observe() of class Interferometer to build a default
set of frequency weights (all unity) and assigned to the attribute bp_wts
(*) Modified the docstrings of class Interferometer to note the inclusion of this
new attribute bp_wts.
(*) Modified member function observe() of class Interferometer to incorporate more
of python numpy concept of broadcasting of arrays 

(*) Added a new class InterferometerArray which is a significant enhancement over
the class Interferometer. The former can handle multiple baselines whereas the 
latter can handle only one baseline at a time. The former also has some memory
optimization strategies built in including the efficient numpy broadcasting of
arrays. In addition, this class is not limited to compact foreground models but
can also handle extended structures by approximating them with circular gaussian
profiles in the image domain and corresponding visibility weights in the aperture 
plane.

(*) From here on, class InterferometerArray supercedes the functionality of class
Interferoemter and hence, the latter will not be developed any further. 

---------------------------------------------------------------------------------
from v1.01 of interferometry:
============================

In primary_beams.py,

(*) Vectorized the routines so a vector of frequencies/wavelengths can be handled
all at once.
(*) Changed docstrings to reflect the vectorized capabilities
(*) Modified isotropic_radiators_array_field_pattern() so it can handle well
numerically angles very close to zero.
(*) Modified primary_beam_generator() to include a telescope system where only a
MWA dipole is used ignoring the dipole array pattern in a tile. 

In interferometry.py,

(*) In member functions observe() and observing_run() of class Interferometer,
renamed the input parameter fov_radius to roi_radius.
(*) In member functions observe() and observing_run() of class Interferometer,
added a new input parameter roi_center which defines the center around which
roi_radius is to be used.
(*) In member function observe() of class Interferometer, replaced temporary
variable ptmp which changes reference from Alt-Az to direction cosines with
two meaningful variables pc_altaz and pc_dircos.
(*) In member function observe() of class Interferometer, replaced usage of 
len(d12) with len(m2) for an easy accommodation of cases where
roi_center='zenith'
(*) In member function observe() of class Interferometer, replaced usage of 
internal variable phase_center with pc_altaz because they are identical and
removed the redundant definition of phase_center
(*) In member function observe() of class Interferometer, replaced usage of 
source_positions with skypos_altaz_roi
(*) In member function observe() of class Interferometer, if input parameter
roi_center is set to 'zenith', the source positions in the catalog are converted
to Alt-Az coordinates and numpy's where() function selects sources in the region
of interest instead of using computationally expensive spherematch() function 
from geometry module. However, in such a scenario, if the catalog's coordinates
are not in Alt-Az coordinate system, every call of observe() will invoke a 
conversion of the entire catalog to Alt-Az coordinate system.
(*) Modified the docstring of member function observe() of class Interferometer
(*) Added docstring to member function observing_run() of class Interferometer
(*) Modified certain parts inside member function observe() of class
interferometer to take advantage of the vectorized primary_beam codes
(*) Added input parameter brightness_temperature to member functions observe()
and observing_run() of class Interferometer to denote the units of flux density
which can now be 'K' (Kelvin) or 'Jy' (Jansky)
(*) Added an attribute flux_unit for class Interferometer which denotes the unit 
of flux density (either 'K' for Kelvin or 'Jy' for Jansky)
(*) Member function save() of class Interferometer saves the attribute flux_unit
onto the header of the output FITS file.
(*) Fixed save() member function of class Interferometer to write out t_acc and
vis_rms_freq by modifying the criterion checking for empty lists
(*) Modified docstring of class Interferometer to indicate that the telescope 
attribute can also be set to 'mwa_dipole' in addition to the already existing
options such as 'vla', 'gmrt', and 'mwa'.

In VLA_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius

In MWA_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius

In MWA_observing_run_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius
(*) Ensured that catalog frequency and observing frequency are passed to the 
observing member function(s) in class Interferometer in the same units

Created a new file observing_run_test_cases.py which simulates many test cases
sampling different parameters such as observing parameters, foreground models, 
etc.


---------------------------------------------------------------------------------
from v1.0 of interferometry:
===========================

In interferometry.py,

(*) Added a member function band_averaged_noise_estimate() to class
Interferometer.
(*) Corrected the thermal noise rms formula. It was missing a square root for 
the observing time and frequency width
(*) Added docstring to the class Interferometer and all its member functions
(*) Removed unused attrbute obs_catalog
(*) Remove unused attribute pb
(*) Ensured that input parameter skymodel to member function observe() of class
Interferometer is an instance of class Catalog.
(*) Remove unused input pb_min to member function observe() of class 
Interferometer
(*) In member function observe(), made a correction to the geometric
transformation from Alt-Az coordinates to HA-Dec by using LST only for the HA
and not on Dec after the altaz2hadec() transformation in the geometry module
(*) Added a member function observing_run() that can simulate an observing run 
in drift or tracking mode.
(*) Added a member function save() to save the interferometer information onto 
a FITS file on disk
(*) Modified attribute tobs to t_acc (accumulation time) and added t_obs to 
denote observing run duration
(*) Added attribute n_acc to denote the number of accumulations
(*) Inserted initializing statements for t_acc, t_obs, and n_acc
(*) Corrected a 'and' to 'or' in the implementation of frequency scale when 
given in Hz.
(*) In call to primary_beam_generator(), also added an argument to specify phase
center (refer to changes in isotropic_radiators_array_field_pattern() in 
primary_beams.py)
(*) Moved the routine baseline_generator from geometry.py to interferometry.py

In primary_beams.py,

(*) Added docstring to all functions
(*) Made corrections to validation of direction cosines in function 
isotropic_radiators_array_field_pattern()
(*) Added capability to include a phase center and compute primary beams 
relative to this phase center. Correspondingly, added another keyword input
phase_center to isotropic_radiators_array_field_pattern() and to
primary_beam_generator()

In baseline_delay_horizon.py,

(*) Changed explanation of the returned variable delaymatrix in the docstring
of delay_envelope() to remove ambiguity

--------------------------------------------------------------------------------
from v1.2 of python-trials:
==========================

In baseline_delay_horizon.py,

(*) changed global c (speed of light) to FCNST.c where FCNST is the
scipy.constants module
